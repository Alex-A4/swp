<div
         attr:class="form"

         on:createSuccessed="_createSuccessedHandler()"
         on:createFailed="_alertHandler('FormController demo: create failded')"
         on:readSuccessed="_readSuccessedHandler()"
         on:readFailed="_readFailedHandler()"
         on:updateSuccessed="_updateSuccessedHandler()"
         on:updateFailed="_updateFailedHandler()"
         on:deleteSuccessed="_deleteSuccessedHandler()"
         on:deleteFailed="_deleteFailedHandler()"

         on:validationSuccessed="_alertHandler('FormController demo: validation successed')"
         on:validationFailed="_validationFailedHandler()"

         on:toggleIndicator="_alertHandler('FormController demo: toggleIndicator event. If you\'re seeing this message, some error is occured!')"
         on:pendingsFinished="_alertHandler('FormController demo: pendings finished')"
         on:update="_updateHandler()"

         on:requestCustomUpdate="_requestCustomUpdate()"
>
   <Controls.Container.PendingRegistrator name="registrator">
      <Controls.FormController name="formControllerInst" dataSource="{{ _options.dataSource || _dataSource }}" record="{{ _record }}" key="{{ _key }}">
         <Controls-demo.FormController.Container name="Container">
         <div attr:class="form-content">
            <div>
               <span attr:class="form-content__key">now is {{ _key }}</span>
            </div>
            <div attr:class="form-content__name">
               <span>Name: </span>
               <Controls.Validate.Controller name="nameValidator" attr:class="nameValidator">
                  <ws:validators>
                     <ws:Function value="{{ _record && _record.get('nameText') }}">Controls/Validate/Validators/IsRequired</ws:Function>
                  </ws:validators>
                  <ws:content>
                     <Controls.Input.Text validationErrors="{{content.validationErrors}}" bind:value="_record.nameText" placeholder="validator isRequired" name="nameText"/>
                  </ws:content>
               </Controls.Validate.Controller>
            </div>
            <div attr:class="form-content__email">
               <span>E-mail: </span>
               <Controls.Validate.Controller name="emailValidator" attr:class="emailValidator">
                  <ws:validators>
                     <ws:Function value="{{ _record && _record.get('emailText') }}">Controls/Validate/Validators/IsEmail</ws:Function>
                  </ws:validators>
                  <ws:content>
                     <Controls.Input.Text validationErrors="{{content.validationErrors}}" bind:value="_record.emailText" placeholder="validator e-mail" name="emailText"/>
                  </ws:content>
               </Controls.Validate.Controller>
            </div>

               <div attr:class="form-content__submit">
                  <Controls.Button caption="Submit" name="updateButton" on:click="_clickUpdateHandler()" />
               </div>

            <div class="form-result">
               <div if="{{ _recordAsText }}">
                  Record is {{ _recordAsText }}
               </div>
               <br/>
               <div if="{{ dataSourceRecordString }}">
                  DataSource.read('{{ _key }}') is {{ dataSourceRecordString }}
               </div>
            </div>
         </div>
         </Controls-demo.FormController.Container>
      </Controls.FormController>
   </Controls.Container.PendingRegistrator>

   <div class="form-content__create">
      <Controls.Button caption="{{'create with id = ' + idCount}}" name="createButton" on:click="_clickCreateHandler()"/>
   </div>
   <div class="form-content__select">
      <ws:for data="data in _dataSource._data">
         <Controls.Button caption="{{ 'id = ' + data.id }}" name="selectButton" on:click="_clickReadHandler(data.id)"/>
      </ws:for>
   </div>
   <div class="form-content__destroy">
      <Controls.Button caption="Delete" name="deleteButton" on:click="_clickDeleteHandler()"/>
   </div>
</div>
