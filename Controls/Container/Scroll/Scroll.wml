<ws:template name="content">
   <Controls.Container.Scroll.Watcher scope="{{_options}}" name="scrollWatcher">
      <Controls.Event.Registrator name="scrollDetect" register="scroll">
         <!--Реализация области блоков требует наличия следующей структуры ws-BlockLayout > ws-BlockGroup.
         Добавляем класс ws-BlockGroup, для того чтобы была облюдена структура если использовать ws-BlockLayout на контейнере.
         Таким образом мы избавляемся от лишней вложенности.
         https://wi.sbis.ru/doc/platform/developmentapl/interface-development/ready-solutions/blocks/-->
         <span name="content"
              style="{{_displayState.heightFix ? '' : _contentStyles}}"
              class="ws-flex-grow-1 controls-Scroll__content ws-BlockGroup
                     {{_useNativeScrollbar && _options.scrollbarVisible ? '' : 'controls-Scroll__content_hideNativeScrollbar'}}
                     {{_hasHover ? 'controls-Scroll__content_possibleScroll'}}
                     {{_useNativeScrollbar ? 'controls-Scroll__content_auto' : _displayState.heightFix || _contentStyles === undefined ? 'controls-Scroll__content_hidden' : 'controls-Scroll__content_scroll'}}"
              on:controlResize="_resizeHandler()"
              on:scroll="_scrollHandler()">
            <ws:partial template="{{_options.content}}" scope="{{_options}}" attr:class="ws-flex-shrink-0" on:fixed="_fixedHandler()"/>
         </span>
      </Controls.Event.Registrator>
   </Controls.Container.Scroll.Watcher>
</ws:template>

<ws:template name="scrollTpl">
   <div class="controls-Scroll ws-flexbox ws-flex-column">
      <ws:if data="{{_pagingState.visible}}">
         <ws:partial template="content"
                     attr:class="controls-Scroll__content_paging"
                     on:scrollMove="_scrollMoveHandler()"/>
      </ws:if>
      <ws:else>
         <ws:partial template="content"/>
      </ws:else>

      <ws:if data="{{!_useNativeScrollbar && _options.scrollbarVisible && (_hasHover || _dragging)}}">
         <Controls.Container.Scroll.Scrollbar
            position="{{_scrollTop}}"
            contentHeight="{{_displayState.contentHeight}}"
            attr:class="controls-Scroll__scrollbar"
            on:positionChanged="_positionChangedHandler()"
            on:draggingChanged="_draggingChangedHandler()"/>
      </ws:if>
      <ws:if data="{{_options.shadowVisible && _displayState.hasScroll}}">
         <div class="controls-Scroll__shadow controls-Scroll__shadow_top
                     {{_displayState.shadowPosition.indexOf('top') === -1 || _stickyHeaderId ? ' ws-invisible'}}"></div>
         <div class="controls-Scroll__shadow controls-Scroll__shadow_bottom
                     {{_displayState.shadowPosition.indexOf('bottom') === -1 ? ' ws-invisible'}}"></div>
      </ws:if>

      <ws:if data="{{_pagingState.visible}}">
         <Controls.List.Paging class="controls-Scroll__paging"
                               stateBegin="{{_pagingState.stateUp}}"
                               statePrev="{{_pagingState.stateUp}}"
                               stateEnd="{{_pagingState.stateDown}}"
                               stateNext="{{_pagingState.stateDown}}"
                               on:onArrowClick="_arrowClickHandler()"/>
      </ws:if>

      <Controls.Event.Listener event="controlResize" on:controlResize="_resizeHandler()"/>
   </div>
</ws:template>

<ws:if data="{{_useNativeScrollbar}}">
   <ws:partial template="scrollTpl"/>
</ws:if>
<ws:else>
   <ws:partial template="scrollTpl"
               on:mouseenter="_mouseenterHandler()"
               on:mouseleave="_mouseleaveHandler()"
               on:scrollbarTaken="_scrollbarTakenHandler()"
               on:scrollbarReleased="_scrollbarReleasedHandler()"/>
</ws:else>
