/* global requirejs, mocha, Mocha */

//Testing setup
var testing = (function() {
   //Exceptions logger
   var logException = function(exception) {
      console.error(exception);

      var node = document.getElementById('exception');
      if (!node) {
         node = document.createElement('div');
         node.setAttribute('id', 'exception');
         document.getElementsByTagName('body')[0].appendChild(node);
      }
      node.textContent += exception.stack || exception;
   };

   //Loads script with DOM element
   var loadScript = function(url, cfg) {
      var script = document.createElement('script'),
         startNode = document.getElementById('testing-init');
      if (cfg) {
         Object.assign(script, cfg)
      }

      return new Promise(function(resolve, reject) {
         script.src = url;
         startNode.parentNode.appendChild(script);

         script.addEventListener('load', resolve, false);
         script.addEventListener('error', function() {
            reject(new Error('Could not load URL "' + url + '"'));
         }, false);
      });
   };

   //Creates report DOM Node
   var createDomReport = function(id, text) {
      var domElement = document.getElementById(id);
      if (!domElement) {
         domElement = document.createElement('textarea');
         domElement.setAttribute('id', id);
         domElement.setAttribute('readonly', 'readonly');
         document.getElementsByTagName('body')[0].appendChild(domElement);
      }

      domElement.value = text;

      return domElement;
   };

   //Testing framework setup
   var initTestingFramework = function() {
      mocha.setup({
         globals: ['cov_*'],
         ui: 'bdd',
         reporter: function(runner) {
            var query = typeof window === 'undefined' ? '?reporter=XUnit' : window.location.search;
            var result = query.match(new RegExp('[?&]reporter=([^&]*)&?$'));
            var reporterCode = result ? result[1] : 'HTML';

            //JSCoverage it's a virtual reporter just alias of HTML
            if (reporterCode === 'JSCoverage' && Mocha.reporters.HTML) {
               Mocha.reporters.JSCoverage = Mocha.reporters.HTML;
            }

            if (!(reporterCode in Mocha.reporters)) {
               throw new Error('Reporter "' + reporterCode + '" is undefined.');
            }
            var reporter = new Mocha.reporters[reporterCode](runner, {});

            switch (reporterCode) {
               case 'JSCoverage':
                  runner.on('end', function() {
                     if (window.__coverage__) {
                        createDomReport('report', JSON.stringify(window.__coverage__));
                     }
                  });
                  break;

               case 'XUnit':
                  //Change XUnit output stream
                  var buffer = [];
                  reporter.write = function(line) {
                     buffer.push(line);
                  };
                  runner.on('end', function() {
                     createDomReport('report', buffer.join('\n'));
                  });
                  break;
            }
         }
      });

      window.assert = chai.assert;
   };

   //WS setup
   var initWs = function(config) {
      window.wsConfig = config;
   };

   //Standard scripts URL
   var scriptsUrl = {
      requireJs: '{{WS}}/ext/requirejs/require.js',
      requireJsConfig: '{{WS}}/ext/requirejs/config.js',
      jquery: '{{WS}}/ext/jquery-full.js',
      wsContents: 'contents.js',
   };


   //Loads standartd scripts
   var loadScripts = function(map) {
      var scripts = Object.keys(map)
         .filter(function(alias) {
            return map[alias];
         })
         .map(function(alias) {
            return scriptsUrl[alias];
         });

      return Promise.all(scripts.map(function(url) {
         return loadScript(url, {async: false});
      }.bind(this)));
   };

   //Load testing code
   var loadTestList = function(type) {
      return new Promise(function(resolve, reject) {
         switch (type) {
            case 'esm':
               fetch('~test-list.json').then(function(response) {
                  response.json().then(function(data) {
                     Promise.all(data.map(function(url) {
                        return loadScript(url, {type: 'module'});
                     })).then(resolve).catch(reject);
                  });
               }).catch(reject);
               break;

            case 'amd':
               requirejs(['Core/patchRequireJS'], function(patchRequireJS) {
                  patchRequireJS();
                  requirejs(['~test-list'], resolve, reject);
               }, reject);
               break;

            default:
               throw new Error('Unsupported module type ' + type);
         }
      });
   };

   //Runs testing
   var runTesting = function() {
      mocha.run(finishTesting);
   };

   //After testing finished
   var finishTesting = function() {
      document.getElementsByTagName('body')[0].className += ' tests-finished';
   };

   return {
      title: '{{TITLE}} v.{{VERSION}}',
      moduleType: '{{MODULE_TYPE}}',
      scripts: {
         wsContents: '{{MODULE_TYPE}}' === 'amd' && {{WS_CONTENTS_LOAD}},
         jquery: '{{MODULE_TYPE}}' === 'amd',
         requireJs: '{{MODULE_TYPE}}' === 'amd',
         requireJsConfig: '{{MODULE_TYPE}}' === 'amd'
      },

      //Run testing
      run: function() {
         this.init().then(function() {
            loadTestList(this.moduleType).then(runTesting).catch(logException);
         }.bind(this)).catch(logException);
      },

      //Init testing
      init: function() {
         if (this.title) {
            document.title = this.title;
         }

         initTestingFramework();
         this.configure();
         initWs(this.wsConfig);

         return loadScripts(this.scripts);
      },

      //Custom configuration setup
      configure: function() {
         mocha.checkLeaks();
      },

      //WS config getter
      get wsConfig() {
         return {
            wsRoot: '{{WS}}',
            cdnRoot: '{{WS}}/lib/Ext/',
            resourceRoot: '/'
         };
      }
   };
})();

{{POST_SCRIPTS}}
