/// <amd-module name="Data/_chain/ZippedEnumerator" />
/**
 * Объединяющий энумератор
 * @author Мальцев А.А.
 */
import {IEnumerable, IEnumerator} from '../collection';
import Abstract from './Abstract';

export default class ZippedEnumerator<T> implements IEnumerator<T> {
   readonly '[Data/_collection/IEnumerator]' = true;
   private previous: Abstract<T>;
   private items: Array<Array<T>|IEnumerable<T>>;
   private current: any;
   private index: number;
   private enumerator: IEnumerator<T>;
   private itemsEnumerators: Array<IEnumerator<T>>;

   /**
    * Конструктор объединяющего энумератора.
    * @param {WS.Data/Chain/Abstract} previous Предыдущее звено.
    * @param {Array.<Array>|Array.<WS.Data/Collection/IEnumerable>} items Коллекции для объединения.
    * @protected
    */
   constructor(previous: Abstract<T>, items: Array<Array<T> | IEnumerable<T>>) {
      this.previous = previous;
      this.items = items;
      this.reset();
   }

   getCurrent(): any {
      return this.current;
   }

   getCurrentIndex(): any {
      return this.index;
   }

   moveNext(): boolean {
      this.enumerator = this.enumerator || (this.enumerator = this.previous.getEnumerator());

      const hasNext = this.enumerator.moveNext();
      let current;
      let item;
      let itemEnumerator;

      if (hasNext) {
         this.index++;

         current = [this.enumerator.getCurrent()];
         for (let i = 0; i < this.items.length; i++) {
            item = this.items[i];
            if (item instanceof Array) {
               current.push(item[this.index]);
            } else if (item && item['[Data/_collection/IEnumerable]']) {
               itemEnumerator = this.itemsEnumerators[i] || (this.itemsEnumerators[i] = item.getEnumerator());
               if (itemEnumerator.moveNext()) {
                  current.push(itemEnumerator.getCurrent());
               } else {
                  current.push(undefined);
               }
            } else {
               throw new TypeError(`Collection at argument ${i} should implement Data/collection#IEnumerable`);
            }
         }
         this.current = current;
      }

      return hasNext;
   }

   reset() {
      this.enumerator = null;
      this.index = -1;
      this.current = undefined;
      this.itemsEnumerators = [];
   }
}

// @ts-ignore
ZippedEnumerator.prototype.previous = null;
// @ts-ignore
ZippedEnumerator.prototype.items = null;
// @ts-ignore
ZippedEnumerator.prototype.itemsEnumerators = null;
// @ts-ignore
ZippedEnumerator.prototype.enumerator = null;
// @ts-ignore
ZippedEnumerator.prototype.index = null;
// @ts-ignore
ZippedEnumerator.prototype.current = undefined;
