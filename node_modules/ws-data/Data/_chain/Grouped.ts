/// <amd-module name="Data/_chain/Grouped" />
/**
 * Группирующее звено цепочки.
 * @class WS.Data/Chain/Grouped
 * @extends WS.Data/Chain/Abstract
 * @public
 * @author Мальцев А.А.
 */

import Abstract from './Abstract';
import {MapEnumerator} from '../collection';
import {Map} from '../shim';

interface GroupFunc {
   (item: any): string;
}

interface ValueFunc {
   (item: any): any;
}

export default class Grouped<T> extends Abstract<T> /** @lends WS.Data/Chain/Grouped.prototype */{
   /**
    * @property {String|Function} Функция, возвращающая ключ группировки для каждого элемента
    */
   protected _key: string|GroupFunc;

   /**
    * @property {String|Function} Функция, возвращающая значение для каждого элемента
    */
   protected _value: string|ValueFunc;

   /**
    * Конструктор группирующего звена цепочки.
    * @param {WS.Data/Chain/Abstract} source Предыдущее звено.
    * @param {String|function(*): String} key Поле группировки или функция группировки для каждого элемента.
    * @param {String|function(*): *} [value] Поле значения или функция, возвращающая значение для каждого элемента.
    */
   constructor(source: Abstract<T>, key: string|GroupFunc, value: string|ValueFunc) {
      super(source);
      this._key = key;
      this._value = value;
   }

   destroy() {
      this._key = null;
      this._value = null;
      super.destroy();
   }

   // region Data/_collection/IEnumerable

   getEnumerator(): MapEnumerator<T> {
      const toKey = Abstract.propertyMapper(this._key);
      const toValue = Abstract.propertyMapper(this._value);

      return new MapEnumerator(
         this._previous.reduce((memo, item, index) => {
            const key = toKey(item, index);
            const value = toValue(item, index);
            let group;

            if (memo.has(key)) {
               group = memo.get(key);
            } else {
               group = [];
               memo.set(key, group);
            }
            group.push(value);

            return memo;
         },
         new Map())
      );
   }

   // endregion Data/_collection/IEnumerable
}

Grouped.prototype['[Data/_chain/Grouped]'] = true;
// @ts-ignore
Grouped.prototype._key = null;
// @ts-ignore
Grouped.prototype._value = null;
