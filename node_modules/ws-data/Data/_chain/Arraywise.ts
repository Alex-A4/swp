/// <amd-module name="Data/_chain/Arraywise" />
/**
 * Цепочка по массиву.
 * @class WS.Data/Chain/Array
 * @extends WS.Data/Chain/Abstract
 * @public
 * @author Мальцев А.А.
 */

import Abstract from './Abstract';
import {ArrayEnumerator} from '../collection';

export default class Arraywise<T> extends Abstract<T> /** @lends WS.Data/Chain/Array.prototype */{
   protected _source: Array<any>;

   constructor(source: Array<any>) {
      if (!(source instanceof Array)) {
         throw new TypeError('Source should be an instance of Array');
      }
      super(source);
   }

   // region Data/_collection/IEnumerable

   getEnumerator(): ArrayEnumerator<T> {
      return new ArrayEnumerator(this._source);
   }

   each(callback: (item: any, index: number) => void, context?: Object) {
      for (let i = 0, count = this._source.length; i < count; i++) {
         callback.call(
            context || this,
            this._source[i],
            i
         );
      }
   }

   // endregion Data/_collection/IEnumerable

   // region Data/_chain/Abstract

   toArray(): Array<any> {
      return this._source.slice();
   }

   // endregion Data/_chain/Abstract
}

Arraywise.prototype['[Data/_chain/Arraywise]'] = true;

   Object.defineProperty(Arraywise.prototype, 'shouldSaveIndices', { value: false });
