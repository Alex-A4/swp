/// <amd-module name="Env/_Request/Console" />
import {Console} from 'Env/_Request/Console';
import StateReceiver from 'Env/_Request/StateReceiver';
// @ts-ignore
import {constants} from "Core/Util";
import {
    Key as StorageKey,
    create as createStorage
} from 'Env/_Request/Storage';
import {
    IRequestConstructor,
    IRequest,
    RequestConfig
} from "Env/_Request/interface";

declare let process;
declare let require;

const global = (function() {return this || (0, eval)('this');}());

let getRequest = () => {
    return process && process.domain && process.domain.req || {}
};

let getForBrowser = (): RequestConfig => {
    let console = new Console({
        console: global.console,
        logLevel: constants.logLevel
    });
    return {
        console,
        location: global.location,
        stateReceiver: new StateReceiver({
            console
        }),
        storageMap: {
            [StorageKey.cookie]: createStorage(StorageKey.cookie),
            [StorageKey.sessionStorage]: createStorage(StorageKey.sessionStorage),
            [StorageKey.localStorage]: createStorage(StorageKey.localStorage),
        }
    }
};

let getForNode = (): RequestConfig => {
    let url = getRequest().url ||
            ''; // чтобы не упало под тестами на ноде
    let NodeCookie = require('Env/_Request/_Storage/NodeCookie');
    let console = new Console({
        console: 'jstestdriver' in global?
                     global.jstestdriver.console:
                     global.console,
        logLevel: constants.logLevel
    });
    return {
        console,
        location: require('url').parse(url),
        stateReceiver: new StateReceiver({
            console
        }),
        storageMap: {
            [StorageKey.cookie]: NodeCookie? new NodeCookie.default(): createStorage(StorageKey.object)
        }
    }
};

/**
 *
 * @param {Core/IRequestConstructor} RequestConstructor
 * @return {IRequest}
 */
let create = (RequestConstructor: IRequestConstructor): IRequest => {
    let requestConfig: RequestConfig;
    if (constants.isBrowserPlatform) {
        requestConfig = getForBrowser();
    } else {
        requestConfig = getForNode();
    }
    return new RequestConstructor(requestConfig);
};
// tslint:disable-next-line
export default create;
