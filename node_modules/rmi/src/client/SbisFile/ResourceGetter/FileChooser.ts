/// <amd-module name="SbisFile/ResourceGetter/FileChooser" />
import Base = require('File/ResourceGetter/Base');
// @ts-ignore
import Chooser = require('optional!FileLoader/Chooser');
// @ts-ignore
import Deferred = require('Core/Deferred');
import FileSystem = require('File/ResourceGetter/FileSystem');
import LocalFile = require('File/LocalFile');
import LocalFileLink = require('File/LocalFileLink');

type FileInfo = {
    name: string;
    path: string;
    size?: number;
    file: File;
    data?: object;
    type?: 'file' | 'folder';
}
/**
 * @typedef {Object} FileInfo
 * @property {String} name Имя файла
 * @property {Number} [size] Размер файла
 * @property {String} path Путь до файла. Поле присутствует если был выбор через окно выбора файлов
 * @property {File} file Объект FileAPI. Поле присутствует если был выбор через стандартное окно выбора
 * @property {Object} [data] Дополнительная информация, если файл форматный. Наличие поля не гарантируется
 * @property {'file' | 'folder'} type Папка это или файл. Наличие поля не гарантируется
 */
type Option = {
    multiSelect: boolean;
    canChooseFolder: boolean;
    reportReader: boolean;
    folder: string;
    panelMode: string;
    serviceUrl: string;
    parent: any;
    extensions: Array<string>;
}
const DEFAULT_OPTIONS: Partial<Option> = {
    /**
     * @cfg {Boolean} Доступен ли выбор сразу нескольких файлов
     * @name SbisFile/ResourceGetter/FileChooser#multiSelect
     */
    multiSelect: true,
    /**
     * @cfg {Boolean} Доступны ли папки для выбора
     * @name SbisFile/ResourceGetter/FileChooser#canChooseFolder
     */
    canChooseFolder: false,
    /**
     * @cfg {Boolean} Включен ли разбор отчетов
     * @name SbisFile/ResourceGetter/FileChooser#reportReader
     */
    reportReader: true,
    /**
     * @cfg {String} Путь, который будет выбран при открытии окна
     * <ul>
     * <li> desktop - рабочий стол </li>
     * <li> mycomputer - мой компьютер </li>
     * <li> mydocuments - мои документы </li>
     * <li> links - избранное (пункта нет в windows xp) </li>
     * <li> net - сеть </li>
     * </ul>
     * @name SbisFile/ResourceGetter/FileChooser#folder
     */
    folder: "",
    /**
     * @cfg {Lib/Control/Control} parent Родительский модуль для открываемой панели выбора
     * @name SbisFile/ResourceGetter/FileChooser#parent
     */
    parent: undefined,
    /**
     * @cfg {Array.<String>} Массив расширений, разрешенных для выбора, например ['exe','xml'].
     * Также с этой опцией будет недоступен фильтр.
     * @name SbisFile/ResourceGetter/FileChooser#extensions
     */
    extensions: null,
    /**
     * @cfg {"floatArea" | "dialog"} Режим отображения окна
     * @name SbisFile/ResourceGetter/FileChooser#panelMode
     */
    panelMode: 'floatArea'
    /**
     * @cfg {String} Адрес сервиса для отображения форматных документов
     * @name SbisFile/ResourceGetter/FileChooser#serviceUrl
     */
    /**
     * @cfg {String} Имя шаблона, отображаемого в шапке окна
     * @name SbisFile/ResourceGetter/FileChooser#additionalTemplate
     */
    /**
     * @cfg {String} Доступные классы: FileChooser__SbisRu - окно адаптированное под sbis.ru
     * @name SbisFile/ResourceGetter/FileChooser#className
     */
};

/**
 * Модуль позволяющий выбрать файлы через окно выбора файлов FL.FileChooser / стандартное окно,
 * реализующий интерфейс получения файлов {@link File/ResourceGetter/IResourceGetter}
 * Для открытия "богатого окна выбора" необходимо наличие СБИС Плагин,
 * иначе будет использовано нативное окно выбора файлов через модуль {@link File/ResourceGetter/FileSystem}
 *
 * @class
 * @name SbisFile/ResourceGetter/FileChooser
 * @extends File/ResourceGetter/Base
 */
class FileChooser extends Base {
    protected readonly name = 'FileChooser';
    private _chooseDef: Deferred;
    private readonly _$options;
    private readonly _chooseOpt;
    constructor(opt: Partial<Option>) {
        super();
        this._$options = opt;
        this._chooseOpt = {
            handlers: {
                /**
                 * Обработчик события выбора файлов
                 * @param {Core/EventObject} event Дескриптор события
                 * @param {Array.<FileInfo>} files Массив объектов с информацией о выбранном файле
                 * @param {Object} [additional]
                 */
                onChoose: (event, files: Array<FileInfo>, additional) => {
                    if (!files.length) {
                        return this._chooseDef.cancel();
                    }
                    var result = files.map((info) => {
                        if (info.file instanceof Blob) {
                            return new LocalFile(info.file);
                        }
                        if (typeof info.path === 'string') {
                            return new LocalFileLink(info.path, {}, {
                                isDirectory: info.type == "folder",
                                name: info.name,
                                size: info.size
                            });
                        }
                        return new Error('Ошибка выбора файла');
                    });
                    this._chooseDef.callback(result);
                },
                onCancel: (event) => {
                    this._chooseDef.cancel();
                }
            }
        }
    }
    /**
     * Вызов окна выбора файлов
     * @return {Core/Deferred.<Array.<File/LocalFile | File/LocalFileLink | Error>>}
     */
    getFiles() {
        if (this._chooseDef) {
            return new Deferred().cancel();
        }
        this._chooseDef = new Deferred();
        let opt = {...DEFAULT_OPTIONS, ...this._$options};
        Chooser.choose({
            ...opt,
            folderPath: opt.folder,
            disableReportReader: opt.reportReader === false,
            useMultiSelection: opt.multiSelect,
            canUploadFolder: opt.canChooseFolder,
            ...this._chooseOpt
        });

        return this._chooseDef.addBoth((result) => {
            /*
             * в IE выбор файла через FileSystem будет синхронным
             * и событие FileLoader/Chooser#onChoose так же сработает синхронно
             * И, чтобы не вернуть undefined, зануляем значение внутри цепочки обработчиков
             */
            delete this._chooseDef;
            return result;
        });
    }
    canExec() {
        return Deferred.success(!this.isDestroyed())
    }
}

// Если FileLoader/Chooser не подключены к проекту, вернём FileSystem
export = FileChooser? FileChooser: FileSystem;
