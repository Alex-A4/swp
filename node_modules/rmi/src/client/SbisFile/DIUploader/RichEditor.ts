/// <amd-module name="SbisFile/DIUploader/RichEditor" />
// @ts-ignore
import Di = require('WS.Data/Di');
import Attach = require('File/Attach');
import SbisDisk = require('SbisFile/Attach/Option/Sources/SbisDisk');
import FileSystem = require('File/Attach/Option/Getters/FileSystem');

/**
 * Костыльное решение для загрузки изображений в RichEditor
 * https://online.sbis.ru/opendoc.html?guid=f062da1d-d2e1-48a2-9950-46a86c8dd493
 */

class Loader {
   private attach;
   private getAttach() {
        if (this.attach) {
            return this.attach;
        }
        this.attach = new Attach({
            multiSelect: false,
            getterOptions: [new FileSystem({
                extensions: ['image']
            })],
            sourceOptions: [new SbisDisk({
                catalog: 'images',
                publicAccess: true
            })]
        });
        return this.attach;
    };
    /**
     * Выбор и загрузка изображениея в FileStorage
     * @return {Core/Deferred}
     */
   startFileLoad() {
       let attach = this.getAttach();
       return attach.choose("FileSystem").addCallback(function (files) {
           if (files[0] instanceof Error) {
               /* tslint:disable:max-line-length*/
               /*
                * хардкод для текста ошибки,
                * промониторить сделают ли отдельный стандарт для этого или нормально сможем передать ошибку от загрузчика
                * https://online.sbis.ru/open_dialog.html?guid=01c4161c-41d4-8517-01dd-7b1471544e12&message=abe6fa10-57fd-4818-8175-76291ff33500
                */
               let error = new Error(rk('Загрузка объектов данного типа не поддерживается.'));
               error.name = 'WrongFileType';
               return error;
           }
           return attach.upload();
       }).addCallback(function (results) {
           let model = results[0];
           return {
               id: model.get('fileid'),
               href: model.get('href'),
               filePath: model.get('relativePath')
           };
       });
   }
}
let ImageLoader = {
   getFileLoader() {
      return new Loader();
   },
   canMultiSelect: false
};
if (!Di.isRegistered('ImageUploader')) {
   Di.register('ImageUploader', ImageLoader, {
      instantiate: false
   });
}
export = Loader;
