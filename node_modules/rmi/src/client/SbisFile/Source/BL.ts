/// <amd-module name="SbisFile/Source/BL" />
import FileAbstract = require("SbisFile/Source/Abstract");
// @ts-ignore
import Deferred = require("Core/Deferred");
import LocalFile = require("File/LocalFile");
// @ts-ignore
import Chain = require("WS.Data/Chain");
import {Resource} from "./Interface";
import {UPLOAD_DIR_ERROR} from "SbisFile/Source/_Const";
import Directory = require("File/Directory");
import 'SbisFile/Source/Provider/BL';

// Обёртка над файлом, если БЛ принимает в качестве аргумента Binary
type RPCBinary = {
    href: string;
}
// Обёртка над файлом, если БЛ принимает в качестве аргумента (RPC)File
type RPCFile = {
    "Данные": RPCBinary
}

let getRPCBinary = (href: string): RPCBinary => ({href});
let getRPCFile = (href: string): RPCFile => ({'Данные': getRPCBinary(href)});

const DEFAULT = {
    provider: 'source.provider.sbis-file',
    /**
     * @cfg {String} Имя поля, в котором будет лежать тело запроса
     */
    requestField: 'Запрос',
    /**
     * @cfg {String} Имя параметра на бизнес-логике, который будет содержать файл
     */
    fileProperty: 'Файл',
    /**
     * @cfg {Boolean} Бинарный ли тип аргумента бизнес-логики
     * false, если БЛ принимает (RPC)File
     * true, если БЛ принимает Binary
     */
    rpcBinary: false
};
/**
 * Класс источника данных,
 * позволяющий загружать сущность файлов {@link File/LocalFile} на бизнес-логику СБИС
 * @class
 * @name SbisFile/Source/BL
 * @extends SbisFile/Source/Abstract
 * @public
 * @author Заляев А.В.
 */
class BL extends FileAbstract /** @lends SbisFile/Source/BL.prototype */ {
    private _$requestField: string;
    private _$fileProperty: string;
    private _$rpcBinary: boolean;
    constructor(cfg: object){
        let config = {...DEFAULT, ...cfg};
        super(config);
        this._$requestField = config.requestField;
        this._$fileProperty = config.fileProperty;
        this._$rpcBinary = config.rpcBinary;
    }

    protected _upload(resource: Resource, meta: any): Deferred {
        if (resource instanceof Directory) {
            return Deferred.fail(UPLOAD_DIR_ERROR);
        }
        // Имя параметра в FormData
        let fileProperty = '_file';

        let rpcFile = this._$rpcBinary ? getRPCBinary(fileProperty): getRPCFile(fileProperty);
        // строка с сериализованным объектом, содержащим параметры БЛ метода
        let rpcMeta = this._prepareArgumentsForCall({
            [this._$fileProperty]: rpcFile,
            ...new Chain(meta).toObject()
        });
        return this.getProvider().upload({
            resource,
            meta: rpcMeta,
            service: {
                method: this._$binding.create,
                requestField: this._$requestField,
                fileProperty,
                rpcFileProperty: this._$fileProperty
            }
        })
    }
}

export = BL;
