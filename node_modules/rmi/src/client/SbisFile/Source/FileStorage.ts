/// <amd-module name="SbisFile/Source/FileStorage" />
import FileAbstract = require("SbisFile/Source/Abstract");
// @ts-ignore
import Deferred = require("Core/Deferred");
import LocalFile = require("File/LocalFile");
import {FileStorageConfig as SourceConfig} from "Interface";
import 'SbisFile/Source/Provider/FileStorage';

const DEFAULT = {
    provider: 'source.provider.file-storage',
    adapter: 'adapter.json',
    /**
     * @cfg {String} serviceUrl Адрес сервиса FileStorage
     */
    serviceUrl: null,
    /**
     * @cfg {String} storage Используемое хранилище
     */
    storage: null
};
/**
 * Класс источника данных для работы с сервисом FileStorage
 * @class
 * @name SbisFile/Source/FileStorage
 * @extends SbisFile/Source/Abstract
 * @public
 * @author Заляев А.В.
 */
class Source extends FileAbstract /** @lends SbisFile/Source/FileStorage.prototype */ {
    private _$serviceUrl: string;
    private _$storage: string;
    constructor(cfg: SourceConfig) {
        let config = {...DEFAULT, ...cfg};
        super(config);
        this._$storage = config.storage;
        this._$serviceUrl = config.serviceUrl;
        if (!this._$serviceUrl) {
            throw new Error('Argument "serviceUrl" is required');
        }
        if (!this._$storage) {
            throw new Error('Argument "storage" is required');
        }
    }

    /**
     * @param {SbisFile/Source/FileStorageMeta} meta
     * @param {File/LocalFile} resource Загружаемый файл на бизнес-логику
     * @return {Core/Deferred.<File/Attach/Model.<SbisFile/Source/FileStorageUploadResult>>}
     * @method
     * @name SbisFile/Source/FileStorage#create
     */

    /**
     * Вызов загрузки файла на сервис FileStorage
     * @param {File/LocalFile} resource
     * @param {*} meta
     * @return {Core/Deferred}
     * @protected
     * @override
     */
    protected _upload(resource: LocalFile, meta: any): Deferred {
        return this.getProvider().upload({
            service: {
                url: this._$serviceUrl,
                storage: this._$storage
            },
            meta,
            resource
        });
    }
}

export = Source;
