/// <amd-module name="SbisFile/Source/SbisDisk" />
import FileAbstract = require("SbisFile/Source/Abstract");
// @ts-ignore
import Chain = require("WS.Data/Chain");
// @ts-ignore
import Deferred = require("Core/Deferred");
import {Resource, SbisDiskConfig as SourceConfig} from "Interface";
import 'SbisFile/Source/Provider/SbisDisk';

const DEFAULT = {
    adapter: 'adapter.json',
    provider: 'source.provider.sbis-disk',
    /**
     * @cfg {String} catalog Каталог для загрузки на сервис
     *
     * <ul>
     *  <li> mydocs – мои документы </li>
     *  <li> commondocs – общие документы </li>
     *  <li> docs – документы </li>
     *  <li> images – картинки </li>
     *  <li> messages – сообщения </li>
     * </ul>
     */
    catalog: 'temp',
    /**
     * @cfg {String} serviceUrl Адрес сервиса СБИС Диск
     */
    serviceUrl: '/disk/api/v1/',
    /**
     * @cfg {Boolean} publicAccess
     */
    publicAccess: false
};
/**
 * Класс источника данных для работы с сервисом СБИС Диск
 * @class
 * @name SbisFile/Source/SbisDisk
 * @extends SbisFile/Source/Abstract
 * @public
 * @author Заляев А.В.
 */
class Source extends FileAbstract /** @lends SbisFile/Source/SbisDisk.prototype */ {
    private _$catalog: string;
    private _$serviceUrl: string;
    private _$publicAccess: boolean;
    constructor(cfg: SourceConfig) {
        let config = {...DEFAULT, ...cfg};
        super(config);
        this._$catalog = config.catalog;
        this._$serviceUrl = config.serviceUrl;
        this._$publicAccess = config.publicAccess;
    }
    /**
     *
     * @param {File/LocalFile | File/Directory} resource Загружаемый ресурс в СБИС Диск
     * @param {Object | WS.Data/Entity/Record} meta Дополнительные мета данные,
     * которые могут понадобиться для создания модели
     * @return {Core/Deferred} Асинхронный результат выполнения.
     * @override
     * @protected
     */
    protected _upload(resource: Resource, meta): Deferred {
        return this.getProvider().upload({
            resource,
            meta: new Chain(meta).toObject(),
            service: {
                catalog: this._$catalog,
                url: this._$serviceUrl
            },
            publicAccess: this._$publicAccess
        });
    }
}

export = Source;
