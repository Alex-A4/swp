import LocalFile = require('File/LocalFile');
import Directory = require('File/Directory');
// @ts-ignore
import ITransport = require("Transport/ITransport");

export type SourceConfig = {
    adapter: string;
    provider: string;
    model: string;
}
export type ProgressData = {
    totalSize: number;
    uploadSize: number;
    uploadPercent: number;
}
export type ProviderConfig = {
    onprogress: (data: ProgressData, resource: Resource) => void;
    uploadTransport: ITransport;
}
export type Meta = object;
export type Service = object;
export type Resource = LocalFile | Directory

export type UploadParam<TResource extends Resource = LocalFile> = {
    service: Service;
    meta: Meta;
    resource: TResource;
}

export type TransportParam = {
    method?: 'POST' | 'PUT' | 'GET';
    url: string;
    dataType: string;
}
export type RequestParam = TransportParam & {
    data: any;
    headers: object;
}

/// region BL
export type BLService = {
    method: string;
    contract: string;
    requestField: string;
    fileProperty: string;
}
export type BLUploadParam = UploadParam & {
    service: BLService;
}
/// endregion BL
/// region FileStorage
export type FileStorageConfig = SourceConfig & {
    serviceUrl: string;
    storage: string;
}
/**
 * Параметры сервиса
 * @typedef {Object} SbisFile/Source/FileStorageService
 * @property {String} url Адрес сервиса FileStorage
 * @property {String} storage Используемое хранилище
 */
export type FileStorageService = {
    url: string;
    storage: string;
}
/**
 * Дополнительные параметры загрузки отдельного ресурса
 * @typedef {Object} SbisFile/Source/FileStorageMeta
 * @extends SbisFile/Source/Meta
 * @property {String} newFileName Новое имя файла
 * @property {Boolean} publicAccess
 * @property {Number} deleteAfterPermanently
 * @property {Number} deleteAfter
 */
export type FileStorageMeta = Meta & Partial<{
    deleteAfter: number;
    deleteAfterPermanently: number;
    publicAccess: boolean;
    newFileName: string;
}>
/**
 * Параметры загрузки ресурса
 * @typedef {Object} SbisFile/Source/FileStorageUploadParam
 * @extends SbisFile/Source/UploadParam
 * @property {SbisFile/Source/FileStorageService} service
 * @property {SbisFile/Source/FileStorageMeta} meta
 */
export type FileStorageUploadParam = UploadParam & {
    service: FileStorageService;
    meta: FileStorageMeta;
}
/**
 * Результат загрузки ресурса на сервис FileStorage
 * @typedef {Object} SbisFile/Source/FileStorageUploadResult
 * @property {String} "range-md5" Range-MD5 файла
 * @property {String} "public_href" URL/v1/docs/id
 * @property {String} href URL/v1/docs/id?hmac=&mode=write
 */
export type FileStorageUploadResult = {
    "range-md5": string
    "public_href": string;
    "href": string;
    "id": string;
    "public_id": string;
    "size": number;
    "status": number;
}
/// endregion FileStorage
/// region SbisDisk
export type SbisDiskConfig = SourceConfig & {
    catalog: string;
    serviceUrl: string;
    publicAccess: boolean;
}
/**
 * Параметры сервиса загрузки
 * @typedef {Object} SbisFile/Source/SbisDiskService
 * @property {String} url Адрес сервиса
 * @property {String} catalog Каталог загрузки
 */
export type SbisDiskService = Service & {
    catalog: string;
    url: string;
}
/**
 * Дополнительная информация для загрузки конечного файла
 * @typedef {Object} SbisFile/Source/SbisDiskMeta
 * @property {String} [fileId] Идентификатор файла (без версии!), для которого добавляется новая реакция.
 * @property {String} [fileName] Имя загружаемого файла.
 * @property {String} [newFileName] Новое имя загружаемого файла для обновления ревизии.
 */
export type SbisDiskMeta = Meta & {
    fileId: string;
    fileName: string;
    newFileName: string;
}
/**
 * Результат загрузки ресурса на сервис Сбис Диск
 * @typedef {Object} SbisFile/Source/SbisDiskUploadResult
 * @property {String} fileid
 * @property {href} fileid
 * @property {relativePath} fileid
 * @property {Number} status
 */
export type SbisDiskResult = {
    fileid: string;
    href: string;
    relativePath: string;
    status: number;
}
/**
 * Параметры загрузки
 * @typedef {Object} SbisFile/Source/SbisDiskUploadParam
 * @extends UploadParam
 * @property {SbisFile/Source/SbisDiskService} service Параметры сервиса
 * @property {SbisFile/Source/SbisDiskMeta} meta Дополнительная информация для загрузки конечного файла
 * @property {File/LocalFile | File/Directory} resource Ресурс
 * @property {String} [catalog] родительская директория
 * @private
 */
export type SbisDiskUploadParam = UploadParam<Resource> & {
    service: SbisDiskService;
    meta: Partial<SbisDiskMeta>;
    catalog?: string;
    publicAccess?: boolean;
}
/// endregion SbisDisk
/// region FileTransfer
export type FileTransferConfig = SourceConfig & {
    serviceUrl: string;
    storage: string;
}
/// endregion FileTransfer
