/// <amd-module name="SbisFile/Source/Provider/BL" />
import FileAbstract = require("SbisFile/Source/Provider/Abstract");
// @ts-ignore
import RPCBody = require("Transport/RPC/Body");
// @ts-ignore
import RPCHeaders = require("Transport/RPC/Headers");
// @ts-ignore
import ErrorCreator = require('Transport/RPC/ErrorCreator');
// @ts-ignore
import Di = require("WS.Data/Di");
// @ts-ignore
import Deferred = require("Core/Deferred");
import LocalFile = require("File/LocalFile");
// @ts-ignore
import constants = require("Core/constants");
import MaxSizeError = require('File/Error/MaxSize');
import {
    BLUploadParam as UploadParam,
    BLService as Service,
} from "SbisFile/Source/Interface";
import {
    MAX_SIZE_FOR_SEND as MAX_SIZE,
    MAX_UPLOAD_SIZE_ERROR
} from 'SbisFile/Source/_Const'

let getStringSize = (str: string) => {
    let match = encodeURIComponent(str).match(/%[89ABab]/g);
    return str.length + (match ? match.length : 0);
};
let isSizeExceeded = (resource, request): boolean => {
    let size = resource.getData().size + getStringSize(request);
    return size >= MAX_SIZE;
};

/**
 * @class
 * @public
 * @name SbisFile/Source/Provider/BL
 * @extends SbisFile/Source/Provider/Abstract
 */
class BL extends FileAbstract {
    '[SbisFile/Source/Provider/BL' = true;
    upload({resource, service, meta}: UploadParam): Deferred {
        let {method, url} = this._prepareRequestAddress(service);
        let {data, headers, reqBody} = this._prepareRPCArgs(method, meta, resource, service, url);
        /*
         * Запросы больше 100МБ либо обрываются nginx'ом с 413 ошибкой,
         * либо не пропускаются некоторыми браузерами
         * При этом в первом случае мы получим адекватную ошибку,
         * а во втором ошибку, без каких либо данных, которую транспорт примет за потерю связи
         * Поэтому нет смысла пытаться загрузить
         */
        if (isSizeExceeded(resource, reqBody)) {
            let fileName = resource.getName();
            let error = new MaxSizeError({
                message: MAX_UPLOAD_SIZE_ERROR,
                fileName,
                maxSize: MAX_SIZE
            });
            return Deferred.fail(error);
        }
        return this._request({
            url,
            headers,
            data
        }).addCallbacks((result) => {
            let json = result || RPCBody.getEmptyRpcResponse();
            if ('error' in json){
                return ErrorCreator.fromRPC(json.error, method, url);
            }
            return json.result;
        }, (error) => ErrorCreator.fromHTTP(error, method));
    }
    private _prepareRPCArgs(method: string, meta: any, resource: LocalFile, service: Service, url) {
        let reqBody = RPCBody.getBody(method, meta);
        let formData = new FormData();
        formData.append(service.requestField, reqBody);
        formData.append(service.fileProperty, resource.getData(), resource.getName());

        return {
            data: formData,
            reqBody,
            headers: new RPCHeaders({
                url,
                method,
                httpMethod: 'POST'
            })
        };
    }
    private _prepareRequestAddress(service: Service) {
        let endpoint = this.getEndpoint();
        let contract = service.contract || endpoint.contract;
        let method = service.method;
        if ((method.indexOf('.') === -1) && contract) {
            method = contract + this._nameSpaceSeparator + method;
        }
        return {
            method,
            url: endpoint.address || constants.defaultServiceUrl
        }
    }
}

Di.register('source.provider.sbis-file', BL);

export = BL;
