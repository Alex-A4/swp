/**
 * Helper functions used for subscribing instance to events.
 *
 * Author: dv.zuev
 */
define('View/Runner/expressions/subscriber', [
], function eventSubscriber() {

   'use strict';

   var subscriber = {

      /**
       * Create function for event binding.
       *
       * @param func - function for launch
       * @param ctx - context launching
       * @param args - arguments for mix
       * @returns {Function}
       */
      getBindFunc: function (func, args){
         return function () {
            var argsForLaunch = [], i;
            for(i = 0; i < arguments.length; i++){
               argsForLaunch.push(arguments[i]);
            }
            for(i = 0; i < args.length; i++){
               argsForLaunch.push(args[i]);
            }
            func.apply(undefined, argsForLaunch);
         };
      },

      /**
       * Extract events from options object.
       *
       * @param _options
       * @returns {{}}
       */
      getEventsListFromOptions: function(_options) {
         var eventsList = {};
         for (var key in _options) {
            if (_options.hasOwnProperty(key)) {
               if (key.indexOf('event:') === 0) {
                  eventsList[key] = _options[key];
               }
            }
         }
         return eventsList;
      },

      /**
       * Iterate over event objects in event list.
       *
       * @param eventsList
       * @param func
       *    - executes for each (key, object) pair
       */
      forEventObjects: function(eventsList, func) {
         for (var key in eventsList) {
            if (eventsList.hasOwnProperty(key)) {
               var value = eventsList[key];
               for (var i = 0; i < value.length; i++) {
                  func(key, value[i]);
               }
            }
         }
      },

      /**
       * Subscribe instance to all events in the list.
       *
       * @param inst
       * @param parent
       * @param eventsList
       */
      subscribeEvents: function(inst, parent, eventsList) {
         subscriber.forEventObjects(eventsList, function (key, eventObject) {
            if (eventObject.fn) {
               eventObject.bindedFunc = subscriber.getBindFunc(eventObject.fn, eventObject.args);
               inst.subscribe(key.split(':')[1], eventObject.bindedFunc);
            }
         });
      },

      /**
       * Unsubscribe instance from all events in the list.
       *
       * @param inst
       * @param parent
       * @param eventsList
       */
      unsubscribeEvents: function(inst, parent, eventsList) {
         subscriber.forEventObjects(eventsList, function (key, eventObject) {
            if (eventObject.bindedFunc) {
               inst.unsubscribe(key.split(':')[1], eventObject.bindedFunc);
            }
         });
      },

      /**
       * Apply events to the given instance:
       *    1. Subscribe events to the instance
       *    2. Unsubscribe events when instance is destroyed
       *
       * @param inst
       * @param parent
       * @param eventsList
       */
      applyEvents: function (inst, parent, eventsList) {
         subscriber.subscribeEvents(inst, parent, eventsList);
         inst.once && inst.once('onDestroy', function(){
            subscriber.unsubscribeEvents(inst, parent, eventsList);
         });
      }

   };

   return subscriber;
});