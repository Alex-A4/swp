define('View/Runner/expressions/RawMarkupNode', ['View/Runner/focusHelper'], function (FocusHelper) {
   'use strict';

   // this class need for create instance containing raw html and some properties.
   // VDOM will insert it as is and generated node will get some properties.
   var RawMarkupNode = function (markup, attributes, moduleName, key) {
      var nodeProperties = {};
      if (attributes.hasOwnProperty('attr:ws-creates-context')) {
         nodeProperties['ws-creates-context'] = attributes['attr:ws-creates-context'];
      }
      if (attributes.hasOwnProperty('attr:ws-delegates-tabfocus')) {
         nodeProperties['ws-delegates-tabfocus'] = attributes['attr:ws-delegates-tabfocus'];
      }
      if (attributes.hasOwnProperty('attr:ws-tab-cycling')) {
         nodeProperties['ws-tab-cycling'] = attributes['attr:ws-tab-cycling'];
      }
      if (attributes.hasOwnProperty('attr:ws-no-focus')) {
         nodeProperties['ws-no-focus'] = attributes['attr:ws-no-focus'];
      }
      // todo в resetDefaultValues нужно передать вторым аргументом атрибуты, которые могут перебить дефолтные
      FocusHelper.resetDefaultValues(nodeProperties);

      this.markup = markup;
      this.dom = null;
      this.key = key;
      this.nodeProperties = nodeProperties;
      //this.type = {name: moduleName.replace(/\//ig,'.')};
   };

   RawMarkupNode.prototype._getMarkup = function getMarkup() {
      if (typeof this.markup !== 'string') {
         return '';
      }
      return this.markup.trim();
   };
   RawMarkupNode.prototype._setProperties = function setProperties(elem) {
      Object.keys(this.nodeProperties).forEach(function (name) {
         elem[name] = this.nodeProperties[name];
      }.bind(this));
   };
   RawMarkupNode.prototype.applyMarkup = function (elem) {
      elem.innerHTML = this._getMarkup();

      //newElem will be appended to DOM, so we should always return valid DOMNode (can be TextDOMNode)
      var newElem = elem.firstChild || document.createTextNode('');
      this._setProperties(newElem);
      return newElem;
   };

   return RawMarkupNode;
});