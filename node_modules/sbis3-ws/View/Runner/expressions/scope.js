define('View/Runner/expressions/scope', [
   'View/Runner/common'
], function (utils) {
   var replaceOrUnite = function replaceOrUnite(valueInner, valueOuter, prop) {
         if (~uniteProperties.indexOf(prop) && valueInner && valueOuter) {
            valueInner += (' ' + valueOuter);
         } else {
            valueInner = valueOuter;
         }
         return valueInner;
      },
      uniteProperties = ['className'],
      checkMergeProps = function checkMergeProps(object, prop) {
         return object.hasOwnProperty(prop);
      },
      controlPropMerge = function controlPropMerge(inner, object) {
         if (!inner) {
            inner = {};
         }
         for (var prop in object) {
            if (checkMergeProps(object, prop)) {
               inner[prop] = replaceOrUnite(inner[prop], object[prop], prop);
            }
         }
         return inner;
      };
   return {
      /**
       * После uniteScope нужно понять какую функцию мерджа вызвать
       * Позвать её или вернуть просто объект, если ничего
       * мерджить не нужно
       * @param scope
       * @param mergeFn
       * @returns {*}
       */
      calculateScope: function calculateScope(scope, mergeFn) {
         return (utils.isFunction(scope) && scope.__$unite ? scope(mergeFn) : scope);
      },
      controlPropMerge: controlPropMerge,
      propertyNameToIdentifyIsolatedScope: '___$isolatedscope'
   }
});
