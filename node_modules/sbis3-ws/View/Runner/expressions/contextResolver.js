/**
 * Created by dv.zuev on 04.10.2017.
 */
define('View/Runner/expressions/contextResolver', [
   'Core/IoC',
   'Core/DataContext'
], function(IoC, DataContext) {
   function compositeGetVersion() {
      var version = 0;
      for (var key in this) {
         if(this.hasOwnProperty(key) && this[key]) {
            if (this[key].getVersion) {
               version += this[key].getVersion();
            }
         }
      }
      return version;
   }

   return {
      wrapContext: function wrapContext(inst, currentCtx) {
         if (inst && inst._getChildContext) {
            currentCtx = Object.create(currentCtx);
            var ctx = inst._getChildContext();
            for (var i in ctx) {
               if (ctx.hasOwnProperty(i)) {
                  if (!(ctx[i] instanceof DataContext))
                     IoC.resolve('ILogger').error(null, 'Context field ' + i + ' === ' + ctx[i] + ' should be instance of Core/DataContext');
                  currentCtx[i] = ctx[i];
                  if (ctx[i] && ctx[i].getVersion === DataContext.prototype.getVersion) {
                     for (var j in ctx[i]) {
                        if (ctx[i].hasOwnProperty(j) && ctx[i][j]) {
                           if (ctx[i][j].getVersion) {
                              ctx[i].getVersion = compositeGetVersion;
                           }
                        }
                     }
                  }
               }
            }
         }
         return currentCtx;
      },

      resolveContext: function(controlClass, currentContext, control) {
         if (typeof currentContext === 'undefined') {//Корневая нода. Не может быть контекста
            return {};
         }
         var contextTypes = controlClass.contextTypes ? controlClass.contextTypes() : {};
         var resolvedContext = {};
         if (!contextTypes) {
            IoC.resolve('ILogger').error(null, 'Context types are not defined');
         } else {
            for (var key in contextTypes) {
               if (!(currentContext[key] instanceof contextTypes[key])) {
                  IoC.resolve('ILogger').error(null, 'Wrong context field: ' + key + ' === ' + currentContext[key] + ' should be type of '
                     + contextTypes[key].prototype._moduleName
                     + '\nIn component ' + controlClass.prototype._moduleName);
                  resolvedContext[key] = null;
               } else {
                  resolvedContext[key] = currentContext[key];
                  if(control) {
                     resolvedContext[key].registerConsumer(control);
                  }
               }
            }
         }
         return resolvedContext;
      }

   };
});