define('Deprecated/Enum', [], function() {
   var toS = Object.prototype.toString;

   var SUPPORTED = {
      'boolean': 1,
      'string': 1,
      'number': 1
   };

   function strToHash(str) {
      str = str + '';
      return str.split('').reduce(function(hash, c) {
         return hash + 31 * c.charCodeAt(0);
      }, 17);
   }

   function Enum(cfg) {

      this._curValIndex = undefined;
      this._availableValues = {};
      this._hashCode = 0;
      this._fallbackVal = undefined;
      this._initialValue = undefined;

      var
         avValues = cfg.availableValues,
         curValue = cfg.currentValue,
         iKey;

      curValue = (curValue === null || curValue === 'null') ? 'null' : parseInt(curValue, 10);

      if (toS.call(avValues) == '[object Object]' && avValues) {
         for (var i in avValues) {
            if (avValues.hasOwnProperty(i)) {
               var v = avValues[i];
               if (v === null || (typeof v) in SUPPORTED) {
                  iKey = (i === null || i === 'null') ? 'null' : parseInt(i, 10);
                  if (this._fallbackVal === undefined) {
                     this._fallbackVal = iKey;
                  }
                  if (curValue === iKey) {
                     this._curValIndex = iKey;
                  }
                  this._availableValues[i] = avValues[i];
               }
            }
         }
      } else {
         throw new Error('Class Enum. Option availableValues must be set to object');
      }
      if (this._curValIndex === undefined) {
         if (this._fallbackVal === undefined) {
            throw new Error('Class Enum. No values to build');
         } else {
            this._curValIndex = iKey;
         }
      }
      this._initialValue = this._curValIndex;
   }
   /**
    * Реализация объекта "Перечисляемое".
    * Хранит набор доступных значений.
    * Несмотря на то, что в Object ключ - строка, если текущий индекс null, он возвращается как null, а не как "null".
    *
    * @class
    * @name Deprecated/Enum
    * @public
    * @author Бегунов А.В.
    * @deprecated
    */
   Enum.prototype.valueOf = function() {
      return this.getCurrentValue();
   };

   /**
    * Получить индекс текущего значения.
    * @return {*} "Индекс" текущего значения перечисляемого.
    * @example
    * При клике на кнопку (btn) вернуть к начальному состоянию группу радиокнопок (fieldRadio).
    * <pre>
    *    btn.subscribe('onClick', function() {
   *       var index = fieldRadio.getDefaultValue().getCurrentValue();
   *       fieldRadio.setValueByIndex(index);
   *    });
    * </pre>
    */
   Enum.prototype.getCurrentValue = function() {
      return this._curValIndex == "null" ? null : this._curValIndex;
   };

   /**
    * Получить доступные значения Enum.
    * @return {Object} Hash-map доступных значений для данного перечисляемого.
    *
    */
   Enum.prototype.getValues = function() {
      return this._availableValues;
   };

   /**
    * Установить текущее значение перечисляемого
    * @param index индекс нового текущего значения
    * @throws {Error} в случае, если указанный индекс отсутствует в текущем Enum'е
    */
   Enum.prototype.set = function(index) {
      // null преобразовываем к строке 'null'
      index = (index === null) ? 'null' : index;
      if (index in this._availableValues) {
         this._hashCode = 0;
         this._curValIndex = index;
      }
      else {
         // Попытались сбросить Enum, но null не допускается.
         if (index === 'null') {
            this.set(this._initialValue);
         } else // Что-то иное
         {
            throw new Error('Class Enum. Unsupported index: ' + index);
         }
      }
   };

   /**
    * Возвращает представление Enum в виде объекта.
    * Можно использовать для создания клона Enum.
    * <pre>
    *    var enumClone = new Enum(original.toObject());
    * </pre>
    * @returns {Object} Представление в виде объекта
    */
   Enum.prototype.toObject = function() {
      return {
         availableValues: this.getValues(),
         currentValue: this.getCurrentValue()
      }
   };

   Enum.prototype.hashCode = function() {
      if (this._hashCode === 0) {
         this._hashCode = 17 + 31 * Object.keys(this._availableValues).length;

         for (var key in this._availableValues) {
            if (this._availableValues.hasOwnProperty(key)) {
               var
                  val = this._availableValues[key],
                  v = parseInt(key, 10);
               this._hashCode += 31 * ((isNaN(v) ? -1 : v) + strToHash(val));
            }
         }
      }
      return this._hashCode;
   };

   /**
    * Проверяет данный объект на совпадение с другим.
    * Проверяется как текущее выставленное значение, так и набор допустимых.
    *
    * @param obj Объект, с которым сравниваем.
    * @return {Boolean} Совпадает или нет.
    */
   Enum.prototype.equals = function(obj) {
      return obj instanceof Enum &&                  // this is an enum
             this.hashCode() == obj.hashCode() &&              // it stores same values
             this.getCurrentValue() == obj.getCurrentValue();  // current value is the same
   };

   Enum.prototype.commit = function(){
      this._initialValue = this._curValIndex;
   };

   Enum.prototype.rollback = function(val) {
      this.set(val);
   };

   /**
    * Получить текущее значение Enum.
    * @returns {string} Возвращает строковое значение Enum.
    * @example
    * <pre>
    *     var value = myEnum.toString();
    * </pre>
    */
   Enum.prototype.toString = function() {
      return "" + this._availableValues[this._curValIndex];
   };

   /**
    * Клонирует текущий объект
    * @return {Deprecated/Enum}
    */
   Enum.prototype.clone = function() {
      return new Enum({
         currentValue: this.getCurrentValue(),
         availableValues: this.getValues()
      });
   };

   /**
    * Изменено ли значение Enum по сравнению с начальным значением, которым был инициализирован Enum.
    * @returns {boolean} Возвращает булево значение. true - значение было изменено, иначе false.
    */
   Enum.prototype.isChanged = function() {
      return this._curValIndex !== this._initialValue;
   };

   return Enum;

});