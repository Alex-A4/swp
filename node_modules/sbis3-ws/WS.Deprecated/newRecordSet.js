define('Deprecated/newRecordSet', [
   'Core/core-merge',
   'Core/moduleStubs'
], function(
   cMerge,
   moduleStubs
) {

   /**
    * Метод для создания запросов.
    * @param {String} object Имя таблицы, у которой будет вызван метод.
    * @param {String} [method] Имя метода БЛ.
    * @param {Object} [filter] Параметры фильтрации.
    * @param {String} [reader=ReaderUnifiedSBIS] Используемый Reader.
    * @param {Boolean} [autoQuery=true] Производить ли начальное заполнение RecordSet'а.
    * @param {String} [url] Адрес сервиса.
    * @param {String} [hierarchyField=''] Поле иерархии.
    * @param {Object} [readerParams = {}] Дополнительные параметры Reader, например, readMethodName.
    * @returns {Core/Deferred} В случае успеха подписант на результа deferred получит RecodSet {@link Deprecated/RecordSet}.
    * В противном случае происходит ошибка.
    * @example
    * <pre>
    *    fieldLink.subscribe('onBeforeShowRecord', function(event, record){
    *       if (record.isBranch()) {
    *          //не показываем диалог для выбранного подразделения.
    *          event.setResult(false);
    *       } else if (record.get('Сотрудник.Лицо1') !== $ws.single.GlobalContext.getValue('currentOrganization')) {
    *          //если сотрудник в текущей организации, то её запись уже есть и отдадим на показ её.
    *          event.setResult(window.currentOrgRecord);
    *       } else {
    *          //иначе вычитаем.
    *          var waitOrg = new Deferred();
    *          event.setResult(wait);
    *          helpers.newRecordSet('Организация', 'Список', {}, undefined, false).addCallback(function(rs){
    *             waitOrg.dependOn(rs.readRecord(record.get('Сотрудник.Лицо1')));
    *          }).addErrback(function(error){
    *             waitOrg.errback(error);
    *          });
    *       }
    *    });
    * </pre>
    * @see jsonRpcPreparePacket
    * @see prepareSorting
    * @see prepareGetRPCInvocationURL
    * @see fetchFile
    */
   return function (object, method, filter, reader, autoQuery, url, hierarchyField, readerParams) {
      var
         attachDfr,
         canceled = false,
         internalRs = null;

      autoQuery = ((autoQuery === undefined) ? true : !!autoQuery);

      hierarchyField = (hierarchyField === undefined ? '' : hierarchyField);

      readerParams = cMerge({
         otherUrl: url,
         dbScheme: '',
         linkedObject: object,
         queryName: method
      }, (!!readerParams && readerParams.constructor === Object) ? readerParams : {});

      attachDfr = moduleStubs.require('Deprecated/RecordSet')
         .addCallback(function (mods) {
            return new mods[0]({
               hierarchyField: hierarchyField,
               firstRequest: false,
               filterParams: filter,
               readerType: reader || 'ReaderUnifiedSBIS',
               readerParams: readerParams
            })
         }).addCallback(function (rs) {
            var res;

            if (autoQuery && !!method && !canceled) {
               internalRs = rs;
               res = rs.reload().createDependent().addCallback(function () {
                  return rs;
               });
            } else {
               res = rs;
            }

            return res;
         });

      return attachDfr.createDependent().addErrback(function (err) {
         var rs;
         if (err.canceled) {
            canceled = true;
            if (internalRs) {
               rs = internalRs;
               internalRs = null;
               rs.abort();
            }
         }
         return err;
      });
   }
});
