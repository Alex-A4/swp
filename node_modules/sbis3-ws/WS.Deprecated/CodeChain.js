define('Deprecated/CodeChain', ['Core/core-extend'], function(coreExtend) {
   /**
    * Цепочка кода указанной длины.
    * Код добавляется в произвольные места.
    * Выполняются только законченные от начала куски цепочки.
    *
    * @class Deprecated/CodeChain
    * @public
    * @author Бегунов А.В.
    * @deprecated
    */
   return coreExtend({}, /** @lends Deprecated/CodeChain.prototype */{
      $protected: {
         _chain: [],
         _length: 0
      },
      /**
       * @param {Number} chainLen Длинна цепочки
       */
      $constructor: function(chainLen) {
         this._length = chainLen;
         for (var i = 0; i < chainLen; i++) {
            this._chain[i] = 0;
         }
      },
      /**
       * Добавляет код в цепочку
       *
       * @param {Number} idx Позиция цепочки, куда следует добавить код.
       * @param {string} code Код для добавления.
       * @returns {Boolean} true, если цепочка полностью выполнилась, false в противном случае.
       */
      setCode: function(idx, code) {
         if (idx >= this._length || idx < 0) {
            throw new RangeError("Setting chain element above the range: Idx: " + idx + ", Len: " + this._length);
         }
         if (this._chain[idx] !== 0) {
            throw new Error("Setting chain element what is already processed! Erroneous usage detected! Idx: " + idx);
         }
         this._chain[idx] = code;
         return this._check();
      },
      /**
       * Проверяет цепочку.
       * Заменяет успешно выполненный код пустой строкой.
       * @returns {Boolean} True - когда вся цепочка выполнена.
       */
      _check: function() {
         for (var i = 0, l = this._length; i < l; i++) {
            if (typeof this._chain[i] == 'string') {
               if (this._chain[i] !== '') {
                  try {
                     eval(this._chain[i]);
                     this._chain[i] = '';
                  } catch (e) {
                     throw new EvalError("Chain failed due to erroneous code: " + e.message);
                  }
               }
            }
            else {
               return false;
            }
         }
         return true;
      }
   });
});