define('Deprecated/BLObject', [
   'Core/core-extend',
   'Core/Deferred',
   'Core/IoC',
   'Transport/RPCJSON',
   'Deprecated/SerializatorSBIS',
   'Deprecated/RecordSet',
   'Core/core-instance',
   'Deprecated/newRecordSet'
], function(coreExtend, Deferred, ioc, RPCJSON, SerializatorSBIS, RecordSet, cInstance, newRecordSet) {
   var BLObject;

   BLObject = function(config) {
      if (
         !(this instanceof BLObject) ||//It's exactly not a BLObject
         Object.getPrototypeOf(this) === BLObject.prototype//It's not a subclass of BLObject
      ) {
      return ioc.resolve('IBLObject', config);
      }
   };

   BLObject.RETURN_TYPE_ASIS = "asis";
   BLObject.RETURN_TYPE_RECORD = "record";
   BLObject.RETURN_TYPE_RECORDSET = "recordset";

   /**
    * Deprecated/BLObject — абстрактный класс <a href='https://wi.sbis.ru/doc/platform/developmentapl/service-development/service-contract/objects/blobjects/'>объекта БЛ</a>, который предназначен для вызова <a href='https://wi.sbis.ru/doc/platform/developmentapl/service-development/service-contract/objects/blmethods/'>методов БЛ</a> и разбора их результатов.
    * <br/>
    * Создание экземпляра класса Deprecated/BLObject:
    * <pre>
    *    define(... , [... , "Deprecated/BLObject"], function (... , BLObject) {
    *       ...
    *
    *       // Объект БЛ будет найден в сервисе, из которого производится вызов
    *       var bl1 = new BLObject("ObjectName");
    *
    *       // Объект БЛ будет найден в сервисе, путь к которому установлен в serviceUrl
    *       var bl2 = new BLObject({name: "ObjectName", serviceUrl: "auth/service/"});
    *       ...
    *    });
    * </pre>
    * @class Deprecated/BLObject
    * @author Зуев Д.В.
    * @public
    * @deprecated Используйте класс {@link WS.Data/Source/SbisService}.
    */
   var ClientBLObject = coreExtend.extend(BLObject, /** @lends Deprecated/BLObject.prototype */{
       /**
        * @cfg {String}
        * @name Deprecated/BLObject#name
        * @description
        * Устанавливает имя объекта бизнес-логики, из которого нужно производить вызов методов БЛ. По умолчанию поиск объекта БЛ будет производится в том же сервисе приложения, из которого производится вызов. Чтобы изменить сервис, установите его точку входа в опции {@link serviceUrl}.
        * @see serviceUrl
        */
       /**
        * @cfg {String}
        * @name Deprecated/BLObject#serviceUrl
        * @description
        * Устанавливает точку входа в другой сервис. Опцию применяют, чтобы производить вызов методов из других сервисов приложения. Точка входа в сервис приложения устанавливаются в его свойствах.
        */
      $protected: {
         _name: '',
         _serviceUrl: ''
      },
      $constructor: function(cfg) {
         if (cfg && typeof(cfg) == 'object') {
            if ('name' in cfg) {
               this._name = cfg.name;
            }

            if ('serviceUrl' in cfg) {
               this._serviceUrl = cfg.serviceUrl;
            }
         } else if (typeof(cfg) == 'string') {
            this._name = cfg;
         }

         if (!this._name) {
            throw new Error("Name of the object must be specified then creating BLObject instance");
         }
      },
      /**
       * Возвращает имя объекта БЛ.
       * @return {String} Имя объекта.
       * @see call
       * @see query
       */
      getName: function() {
         return this._name;
      },
      /**
       * Производит вызов произвольного <a href='https://wi.sbis.ru/doc/platform/developmentapl/workdata/logicworkapl/objects/blmethods/'>метода бизнес-логики</a>.
       * @param {String} method Имя метода.
       * @param {Object} args Аргументы вызова метода, аналогичны параметрам декларативного метода (см. {@link query}).
       * Передаются без изменений со следующими исключениями:
       * <ul>
       *    <li>{@link Deprecated/Record} и {@link Deprecated/RecordSet} - сериализуется по формату обмена.</li>
       *    <li>Date - сериализуется в строку через Date.toSQL(null).</li>
       * </ul>
       * @param {String} type Тип результата:
       * <ul>
       *    <li>BLObject.RETURN_TYPE_ASIS (или строка 'asis') - "как есть", результат возвращается без какой-либо обработки в том виде, в котором получен от БЛ. Подходит для скаляров.</li>
       *    <li>BLObject.RETURN_TYPE_RECORD (или строка 'record') - результат преобразуется в {@link Deprecated/Record}.</li>
       *    <li>BLObject.RETURN_TYPE_RECORDSET (или строка 'recordset') - результат преобразуется в {@link Deprecated/RecordSet}.</li>
       * </ul>
       * @param {String} [hierarchyField] Поле иерархии. Опция актуальна только результата *type=BLObject.RETURN_TYPE_RECORDSET*.
       * @param {String} [updateMethod] Имя метода бизнес-логики, который будет вызываться для сохранения записей в БД.
       * @param {String} [destroyMethod] Имя метода бизнес-логики, который будет вызываться для удаления записей в БД.
       *
       * @returns {Core/Deferred} Асинхронный результат операции. Тип результата в *callback* зависит от параметра *type*.
       *
       * @throws TypeError Если method не строка.
       * @throws TypeError Если args не объект или путой.
       * @throws TypeError Если type указывает на недопустимый тип.
       *
       * @example
       * Следующий код производит вызов метода "Пользователь.ПолучитьПользователяПоСессии" из текущего сервиса приложения.
       * При вызове передаётся параметр "ИдСессии".
       * В качестве ответа на запрос от бизнес-логики ожидается {@link Deprecated/Record}.
       * Для обработки ответа от бизнес-логики установлено два обработчика.
       * <pre>
       *    define(... , [... , "Deprecated/BLObject"], function (... , BLObject) {
       *       ...
       *
       *       var obj = new BLObject("Пользователь");
       *       obj.call("ПолучитьПользователяПоСессии", { "ИдСессии": 'xxx-yyy' }, BLObject.RETURN_TYPE_RECORD).addCallbacks(
       *          function(record) {
       *             // обработка результата
       *          },
       *          function(error) {
       *             // обработка ошибки
       *          }
       *       );
       *       ...
       *    });
       *
       * </pre>
       * @see query
       * @see getName
       */
      call: function(method, args, type, hierarchyField, updateMethod, destroyMethod) {
         if (!method || typeof(method) != 'string') {
            throw new TypeError("Method name must be specified");
         }
         if (!args || typeof(args) !== 'object') {
            throw new TypeError("Wrong arguments specified. Must be an object");
         }

         switch (type) {
            case BLObject.RETURN_TYPE_RECORD:
               var rs,
                   updateMethodName = updateMethod ? (updateMethod.indexOf('.') !== -1 ?
                                      updateMethod : this._name + '.' + updateMethod) : this._name + '.Записать',
                   destroyMethodName = destroyMethod ? (destroyMethod.indexOf('.') !== -1 ?
                                       destroyMethod : this._name + '.' + destroyMethod) : this._name + '.Удалить';
               rs = new RecordSet({
                  firstRequest: false,
                  readerType: 'StraightArgsReader',
                  readerParams: {
                     dbScheme: '',
                     adapterType: 'TransportAdapterRPCJSON',
                     adapterParams: {
                        serviceUrl: this._serviceUrl,
                        readMethodName: this._name + '.' + method,
                        updateMethodName: updateMethodName,
                        destroyMethodName: destroyMethodName
                     }
                  }
               });
               return rs.readRecord(args);
            case BLObject.RETURN_TYPE_RECORDSET:
               return newRecordSet(this._name, method, args, 'StraightArgsUnifiedReader', true, this._serviceUrl, hierarchyField);
            case BLObject.RETURN_TYPE_ASIS:
               var tmp = {};
               for (var key in args) {
                  if (args.hasOwnProperty(key)) {
                     var
                        value = args[key];
                     if (cInstance.instanceOfModule(value, 'Deprecated/Record') || cInstance.instanceOfModule(value, 'Deprecated/RecordSet')) {
                        tmp[key] = SerializatorSBIS.serialize(value);
                     } else {
                        tmp[key] = value;
                     }
                  }
               }
               return new RPCJSON({serviceUrl: this._serviceUrl}).callMethod(this._name + '.' + method, tmp);
            default:
               throw new TypeError("Wrong return type specified");
         }
      },
      /**
       * Производит вызов <a href='https://wi.sbis.ru/doc/platform/developmentapl/workdata/logicworkapl/objects/blmethods/bllist/'>списочного метода</a> бизнес-логики.
       * @remark
       * С помощью этого метода можно вызвать методы <a href='https://wi.sbis.ru/doc/platform/developmentapl/workdata/logicworkapl/objects/blmethods/bllist/declr/'>декларативный</a> и <a href='https://wi.sbis.ru/doc/platform/developmentapl/workdata/logicworkapl/objects/blmethods/bllist/manual/'>реализуемый вручную</a>.
       * @param {String} method Имя списочного метода.
       * @param {Object} filter Параметры фильтрации (см. <a href='https://wi.sbis.ru/doc/platform/developmentapl/workdata/logicworkapl/objects/blmethods/bllist/declr/#parameters'>Фильтр</a>).
       * @param {Object} [paging] Параметры постраничной навигации (см. <a href='https://wi.sbis.ru/doc/platform/developmentapl/workdata/logicworkapl/objects/blmethods/bllist/declr/#parameters'>Навигация</a>).
       * @param {String} [paging.type] Тип постраничной навигации.
       * @param {Number} [paging.page] Номер страницы, для которой декларативный метод произведёт выборку записей.
       * @param {Number} [paging.pageSize] Размер страницы, по которому определяется число записей на странице.
       * @param {Array.<Array>} [sorting] Параметры сортировки (см. <a href='https://wi.sbis.ru/doc/platform/developmentapl/workdata/logicworkapl/objects/blmethods/bllist/declr/#parameters'>Сортировка</a>).
       * @returns {Core/Deferred} Асинхронный результат выполнения. В результат callback возвращается {@link Deprecated/RecordSet}.
       *
       * @throws TypeError Если method не является строкой.
       * @throws TypeError Если paging не является объектом.
       * @throws TypeError Если paging.page не приводится к числу.
       * @throws TypeError Если paging.pageSize не приводится к числу.
       * @throws TypeError Если sorting не является массивом.
       *
       * @example
       * Следующий код производит вызов метода "Склад.СписокТоваров" из текущего сервиса.
       * В параметры вызова переданы Фильтр, Постраничная навигация и Сортировка.
       * <pre>
       *    define(... , [... , "Deprecated/BLObject"], function (... , BLObject) {
       *       ...
       *
       *       // параметр "Фильтр"
       *       var filters = {
       *          'Новинка': true,
       *          'Рейтинг': 5
       *       },
       *
       *       // параметр "Навигация"
       *       paging = {
       *
       *          // full - полная постраничная навигация
       *          type: 'full',
       *
       *          // запросить 10-ю страницу
       *          page: 10,
       *
       *          // по 20 записей на странице
       *          pageSize: 20
       *       },
       *
       *       // параметр "Сортировка"
       *       sorting = [
       *          ['Цена', true]
       *       ],
       *
       *       // вызов из объекта БЛ "Склад", его поиск будет произведён сервисе приложения, из которого производится вызов
       *       bl = new BLObject('Склад');
       *
       *       // вызов декларативного метода
       *       bl.query('СписокТоваров', filters, paging, sorting).addCallbacks(
       *          function(result) {
       *             // обработка результата
       *          },
       *          function(error) {
       *             // обработка ошибки
       *          }
       *       );
       *       ...
       *    });
       * </pre>
       * @see call
       * @see getName
       */
      query: function(method, filter, paging, sorting){
         if(!method || typeof(method) != 'string')
            throw new TypeError("Method name must be specified");
         if(paging) {
            if(typeof paging != 'object') {
               throw new TypeError("Paging parameter must be an object");
            } else {
               if(paging.type) {
                  paging.page = +paging.page;
                  paging.pageSize = +paging.pageSize;
                  if(isNaN(paging.page))
                     throw new TypeError("Page must be a number (paging.page)");
                  if(isNaN(paging.pageSize))
                     throw new TypeError("Page size must be a number (paging.pageSize)");
               }
            }
         }
         if (sorting && !(sorting instanceof Array)) {
            throw new TypeError("Sorting parameter must be an array");
         }
         return newRecordSet(this._name, method, filter, undefined, !(sorting || paging), this._serviceUrl, undefined).addCallback(function(rs) {
            if (sorting || paging) {
               var loadRes = new Deferred();

               loadRes.addErrback(function (e) {
                  return e;
               });

               if (sorting) {
                  rs.setSorting(sorting, undefined, undefined, true);
               }
               if (paging && paging.type) {
                  rs.setUsePages(paging.type);
                  rs.setPageSize(paging.pageSize, true);
                  rs.setPage(paging.page, true);
               }
               rs.once('onAfterLoad', function(event, recordSet, isSuccess, error) {
                  if (isSuccess) {
                     loadRes.callback(recordSet);
                  } else {
                     loadRes.errback(error);
                  }
               });
               rs.reload();
               return loadRes;
            } else {
               return rs;
            }
         });
      }
   });

   ioc.bind('IBLObject' ,ClientBLObject)
   return BLObject;
});
