define('Deprecated/TransportAdapterRPCAbstract', [
   'Core/IoC',
   'Deprecated/TransportAdapterAbstract',
   'Transport/HTTPError'
], function(ioc, TransportAdapterAbstract, HTTPError) {
   var TransportAdapterRPCAbstract;

   /**
    * Класс-адаптер для работы с абстрактной RPC-службой
    *
    * @class Deprecated/TransportAdapterRPCAbstract
    * @extends Deprecated/TransportAdapterAbstract
    * @author Бегунов А.В.
    * @public
    * @deprecated
    */
   TransportAdapterRPCAbstract = TransportAdapterAbstract.extend(/** @lends Deprecated/TransportAdapterRPCAbstract.prototype */{
      $protected: {
         _errorHandler: function(e) {
            if (e.errType == "error") {
               ioc.resolve('ILogger').error("RPC", (e instanceof HTTPError) ? (e + "") : e.message, e);
            }
            return e;
         },
         _options: {
            objectName: undefined,
            /**
             * @cfg {String} Адрес сервера БЛ
             */
            serviceUrl: '',
            /**
             * @cfg {String} Имя метода, который будет вызываться для создания записей
             */
            createMethodName: '',
            /**
             * @cfg {String} Имя метода для получения списка
             */
            listMethodName: '',
            /**
             * @cfg {String} Имя метода, который будет вызываться для обновления записей
             */
            updateMethodName: '',
            /**
             * @cfg {String} Имя метода, который будет вызываться для удаления записей
             */
            destroyMethodName: '',
            /**
             * @cfg {String} Имя метода, который будет вызываться для объединения записей
             */
            mergeMethodName: '',
            /**
             * @cfg {String} Имя метода, который будет вызываться для копирования записей
             */
            copyMethodName: '',
            /**
             * @cfg {String} Имя метода, который будет вызываться для чтения записей
             */
            readMethodName: ''
         },
         _rpcClient: null
      },
      $constructor: function() {
      },
      /**
       * @returns {Object}
       */
      getRPCClient: function() {
         if (this._rpcClient === null) {
            this._rpcClient = this._createRpcClient();
         }
         return this._rpcClient;
      },
      /**
       * @param client
       */
      setRPCClient: function(client) {
         if (client.callMethod) {
            this._rpcClient = client;
         }
      },
      _invoke: function(method, args) {
         var self = this;
         return this.getRPCClient().callMethod(method, args).addCallbacks(function(d) {
            if (self._options.objectName) {
               d.objectName = self._options.objectName;
            }
            return d;
         }, this._errorHandler);
      },
      _createRpcClient: function() {
         throw new Error("Abstract method TransportAdapterRPCAbstract::_createRpcClient must be implemented in child class");
      },
      list: function(args) {
         return this._invoke(this._options.listMethodName, args);
      },
      update: function(args) {
         return this._invoke(this._options.updateMethodName, args);
      },
      merge: function(args) {
         return this._invoke(this._options.mergeMethodName, args);
      },
      destroy: function(args) {
         return this._invoke(this._options.destroyMethodName, args);
      },
      destroyByFilter: function(args) {
         return this._invoke(this._options.destroyMethodName, args);
      },
      create: function(args) {
         return this._invoke(this._options.createMethodName, args);
      },
      read: function(args) {
         return this._invoke(this._options.readMethodName, args);
      },
      copy: function(args) {
         return this._invoke(this._options.copyMethodName, args);
      },
      /**
       * Прерывает загрузку
       */
      abort: function() {
         if (this._rpcClient) {
            this._rpcClient.abort();
         }
      },
      getConfig: function() {
         return this._options;
      }
   });

   return TransportAdapterRPCAbstract;
});