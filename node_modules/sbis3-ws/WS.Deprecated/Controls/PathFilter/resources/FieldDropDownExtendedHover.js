define('Deprecated/Controls/PathFilter/resources/FieldDropDownExtendedHover', [
   'Core/core-clone',
   "Deprecated/Record",
   'Core/helpers/Object/isEqual',
   "Deprecated/Controls/FieldDropdown/FieldDropdown",
   "Deprecated/Controls/Button/Button",
   "Deprecated/Controls/LinkButton/LinkButton",
   "Deprecated/Controls/FieldCheckbox/FieldCheckbox",
   "i18n!Deprecated/Controls/PathFilter/resources/FieldDropDownExtendedHover"
],
      function(coreClone, dTransportRecord, objectIsEqual, DropDown, Button, LinkButton, Checkbox) {

   'use strict';

   var  MIN_WIDTH_DROPDOWN = 166;       //минимальная ширина для выпадающего списка

   var FieldDropdownExtendedHover = DropDown.extend(/** @lends SBIS3.CORE.FieldDropdownExtendedHover.prototype */{
      $protected: {
         // Список чекбоксов
         _checkboxList: {},
         // Список ключей данных для чекбоксов
         _checkboxListKeys: {},
         // Кнопка подтверждения выбора
         _selectButton: undefined,
         // Список запомненных отмеченных записей
         _selectedRecords: {},
         // Список текущих отмеченных записей
         _currentSelectedRecords: {},
         _options: {
            value: 'default'
         }
      },
      $constructor: function() {
         this._publish('onShowMenu', 'onHideMenu');
      },
      _initializeContent: function() {
         FieldDropdownExtendedHover.superclass._initializeContent.apply(this, arguments);
         this._optContFooter = $(this._multiplyFooterRender())
               .addClass('custom-options-container-footer');
         this._optCont
               .addClass('custom-options-container-with-footer')
               .append(this._optContFooter);
      },
      _bindEvents: function() {
         var self = this;
         this._optContFooter
               .mouseleave(function() {
                  self._hideOptionsAfterTimeout();
               })
               .mouseenter(function() {
                  self._hovered = true;
               });
         FieldDropdownExtendedHover.superclass._bindEvents.apply(this, arguments);
      },
      _showAndPlace: function() {
         // Без таймаута не получается вовремя стрельнуть onShowMenu - он приходит раньше, чем произошел hideMenu, т.к.
         // тот отложен таймаутом в методе _hideOptionsAfterTimeout
         setTimeout(function(){
            var key,
                checkbox;
            if (this._optCont.hasClass('ws-hidden') && this._notify('onShowMenu') !== false) {
               FieldDropdownExtendedHover.superclass._showAndPlace.apply(this, arguments);
               //_selectedRecords TODO проверка в getValue
               for (var cbx in this._checkboxList) {
                  key = this._checkboxListKeys[cbx];
                  checkbox = this._checkboxList[cbx];
                  if (checkbox.getValue() !== !!this._selectedRecords[key]) {
                     checkbox.setValue(!checkbox.getValue());
                  }
               }
               //TODO набор selected может быть больше, чем есть опций (когда в фильтре 50 записей, а видим только 5)
               this._currentSelectedRecords = coreClone(this._selectedRecords);
               //По сути покажем только после первого клика,а не по набору selectedRecords
               //if ($.isEmptyObject(this._currentSelectedRecords)) {
                  this._selectButton.hide();
               //}

            }
         }.bind(this), 42);
      },
      _hideOptionsAfterTimeout: function() {
         if (!this._optCont.hasClass('custom-options-container-locked')) {
            FieldDropdownExtendedHover.superclass._hideOptionsAfterTimeout.apply(this, arguments);
         }
      },
      _multiplyFooterRender: function() {
         var
               self = this,
               result = $('<div></div>');
         this._selectButton = new Button({
            element: $('<div></div>').appendTo(result),
            parent: self.getParent(),
            caption: rk('Отобрать'),
            defaultButton: true,
            visible: false,
            allowChangeEnable: this._options.allowChangeEnable,
            handlers: {
               onActivated: function() {
                  self._selectedRecords = coreClone(self._currentSelectedRecords);
                  self._notify('onChange', self._selectedRecords);//НАДО
                  self.setSelection(this.getValue());
                  self._hideOptions();
               }
            },
            cssClass: 'ws-select-button'
         });
         var staticData = self._options.hasOwnProperty('data') ? self._options.data : null,
             showHasMore = staticData && staticData.hasOwnProperty('keys') ? staticData.keys.indexOf('hasMore') !== -1 : true;
         //добавляем hasMore если данные из БЛ или в data передан hasMore
         if (showHasMore) {
            new LinkButton({
               element: $('<div></div>').appendTo(result),
               parent: self.getParent(),
               caption: rk('Ещё...'),
               cssClass: 'ws-more-button',
               allowChangeEnable: this._options.allowChangeEnable,
               handlers: {
                  onActivated: function() {
                     self._notify('onClickMore', self._currentSelectedRecords);
                     self._hideOptions();
                     //return false;
                  }
               }
            });
         }
         return result;
      },
      _createCustomRow: function() {
         return FieldDropdownExtendedHover.superclass._createCustomRow.apply(this, arguments).bind('dblclick', this._onRowDblClickEvent.bind(this));
      },
      _onRowDblClickEvent: function(e) {
         var
               $target = $(e.target),
               targetControl = $target.wsControl && $target.wsControl();
         if (targetControl instanceof  Checkbox ) {
            this.hideMenu();
            this.clearSelection();
            this._selectedRecords[this._checkboxListKeys[targetControl.getName()]] = this._currentSelectedRecords[this._checkboxListKeys[targetControl.getName()]] = true;
            this._notify('onChange', this._selectedRecords);
            this.setSelection(this.getValue());
         }
         e.stopImmediatePropagation();
      },
      _hideOptions: function() {
         this._notify('onHideMenu');
         this._optCont.removeClass('custom-options-container-locked');
         FieldDropdownExtendedHover.superclass._hideOptions.apply(this, arguments);
      },
      getSelectedRecords: function() {
         return this._selectedRecords;
      },
      _selectingEvent: function(e) {
         var
               $target = $(e.target),
               targetControl = $target.wsControl && $target.wsControl(),
               key,
               checked,
               clickedVal;
         e.stopImmediatePropagation();
         if (targetControl instanceof  Checkbox ) {
            checked = targetControl._getNextState();
            key = this._checkboxListKeys[targetControl.getName()];
            this._optCont.addClass('custom-options-container-locked');
            this._selectButton.show();
            if (checked === 'true') {
               this._currentSelectedRecords[key] = true;
            } else {
               delete this._currentSelectedRecords[key];
            }

            /* Скроем кнопку, если выбранные записи не поменялись */
            if (objectIsEqual(this._currentSelectedRecords, this._selectedRecords)) {
               this._selectButton.hide();
            }
            targetControl.setValue(checked);
         } else {
            clickedVal = $target.closest('.custom-select-option');
            //Почему-то не обновляется value в headText, но его непонятно как сохранять. Массив же.
            //Поэтому просто клик по шапке - ничего не делаем. Поведение аналогично немножественному выбору.
            if (clickedVal.hasClass('ws-PathFilter_headText')) {
               return false;
            }
            if (clickedVal.attr('value') === 'default') {
               this._notifyDefault();
            }
            this.hideMenu();
         }
         return false;
      },
      _notifyDefault: function(){
         this._notify('onClickDefault');
         return false;
      },
      _onAfterLoadRecordSet: function(){
         //не добавляем опцию Еще, так как она в другом месте доьавляется;
      },
      _getMinWidth: function(select, hasScrollbar, scrollWidth) {
         var minWidth = FieldDropdownExtendedHover.superclass._getMinWidth.apply(this, arguments);
         return minWidth > MIN_WIDTH_DROPDOWN ? minWidth : MIN_WIDTH_DROPDOWN;
      },
      _renderOrNot: function(args){
         var valueRender = this.getValueRender(),
            render,
            data,
            attr,
            caption,
            result,
            key;
         render = typeof valueRender === 'function' ? valueRender.apply(this, args) : '';
         data = args[0];
         key = data instanceof dTransportRecord  ? data.getKey() : data;
         attr = args.length > 1 ? args[1] : undefined;
         caption = render && render[0].outerHTML || attr;
         result = $('<div></div>');
         if (data === 'default') {
            result
                  .addClass('ws-PathFilter-dropdown-head')
                  .append($('<div></div>').append(caption));
         } else {
            this._checkboxList[this.getName()+'-' + key] = new Checkbox({
               element: result,
               caption: caption,
               name: this.getName()+'-' + key,
               cssClass: 'ws-PathFilter-checkbox ws-field-checkbox',
               allowChangeEnable: this._options.allowChangeEnable
            });
            this._checkboxListKeys[this.getName()+'-' + key] = key;
         }
         return result;//resultRender instanceof Function ? result.append(resultRender.call(this, arguments)) : result.append($('<div>' + arguments[1] + '</div>'));
      },
      isMultiplyMode: function(){
         return true;
      },
      getTextValuesBySelectedKeys: function(keys){
         var valuesArr = [],
             tmpVal;
         for (var i in keys) {
            if (keys.hasOwnProperty(i)) {
               tmpVal = this.getValueByKey(keys[i]) ||  this.getValueByKey(keys[i] + '');
               if (tmpVal) {
                  valuesArr.push(tmpVal);
               }
            }
         }
         return valuesArr;
      },
      _getKeys: function(){
         var valuesArr = [],
               index;
         for (var i in this._selectedRecords) {
            if (this._selectedRecords.hasOwnProperty(i)) {
               index = parseInt(i, 10);
               if (!isNaN(index))   {
                  valuesArr.push(index);
               }
            }
         }
         return valuesArr;
      },
      getValue: function(){
         return this._getKeys();
      },
      setValue: function(key){
         if (key === 'default') {
             DropDown.superclass.setValue.apply(this, arguments);
         }
      },
      setSelection: function(value){
         var name;
         if (value === 'default') {
            this.clearSelection();
            this.setValue(value);
         } else if (value instanceof Array){
            this.clearSelection();
            for (var i = 0, len = value.length; i < len; i++){
               name = this.getName()+'-' + value[i];
               if (this._checkboxList.hasOwnProperty(name)) {
                  this._checkboxList[name].setValue(true);
               }
               this._selectedRecords[value[i]] = true;
               this._currentSelectedRecords[value[i]] = true;
            }
         }
      },
      clearSelection: function(){
         this._currentSelectedRecords = {};
         this._selectedRecords = {};
         for (var i in this._checkboxList) {
            if (this._checkboxList.hasOwnProperty(i)){
               this._checkboxList[i].setValue(false);
            }
         }

      }
   });

   return FieldDropdownExtendedHover;
});