define('Deprecated/Controls/DataViewAbstract/plugins/Move-plugin', [
   'SBIS3.CONTROLS/Utils/InformationPopupManager',
   'Deprecated/Controls/TreeView/TreeView',
   'Deprecated/Controls/HierarchyViewAbstract/HierarchyViewAbstract',
   'Deprecated/core-attach',
   'Core/core-merge',
   'Core/helpers/Function/callNext',
   'Core/helpers/i18n/wordCaseByNumber',
   'Deprecated/BLObject',
   'Deprecated/Record',
   'Deprecated/RecordSet',
   'Core/ParallelDeferred',
   'Core/Deferred',
   'Core/constants',
   'Deprecated/Controls/DataViewAbstract/DataViewAbstract',
   'Deprecated/Controls/DragAndDropPlugin/DragAndDropPlugin',
   'Deprecated/Controls/DialogConfirm/DialogConfirm',
   'Lib/Control/FloatArea/FloatArea',
   'Lib/Control/Dialog/Dialog',
   'Transport/nodeType',
   'Deprecated/res/wsmodules/ReplaceRecordDialog/ReplaceRecordDialog',
   'i18n!Deprecated/Controls/DataViewAbstract/plugins/Move-plugin'
], function(
   InformPopManager,
   CTreeView,
   CHierarchyViewAbstract,
   cAttach,
   cMerge,
   callNext,
   wordCaseByNumber,
   dBLObject,
   dTransportRecord,
   dTransportRecordSet,
   cParallelDeferred,
   cDeferred,
   cConstants,
   DataViewAbstract,
   DragAndDropPlugin,
   DialogConfirm,
   FloatArea,
   Dialog,
   nodeType
){
   (function(){
      'use strict';

      cConstants.DataViewAbstractViewPlugin = {
         recordsMoveOffset: {
            left: 5,
            top: 5
         }
      };

      var MOVEABLE_AREA_HEIGHT = 7; //Высота подсвечиваемого места у записи сверху или снизу для изменения порядка

      DataViewAbstract.extendPlugin(DragAndDropPlugin);

      /**
       * @class Deprecated/Controls/DataViewAbstract/plugins/Move-plugin
       * @extends Deprecated/Controls/DataViewAbstract/DataViewAbstract
       * @author Крайнов Д.О.
       * @plugin
       * @public
       * @deprecated
       */
      DataViewAbstract.MovePlugin = DataViewAbstract.extendPlugin(/** @lends Deprecated/Controls/DataViewAbstract/plugins/Move-plugin.prototype */{
         /**
          * @event onBeforeMoveDialogShow Перед показом диалога перемещения
          *
          *
          * Событие происходит перед тем, как будет показан диалога перемещения записей.
          * @param {Core/EventObject} eventObject Дескриптор события.
          * @return {dTransportRecordSet|cDeferred|*} Если передать:
          * <ol>
          *    <li>dTransportRecordSet - переопределит RecordSet, который отображает диалог перемещения.</li>
          *    <li>cDeferred - ждем, когда закончится асинхронное событие, и в диалог передаётся результат выполнения.</li>
          *    <li>Любой другой тип данных - RecordSet набирается стандартным образом.</li>
          * </ol>
          * @example
          * <pre>
          *     dataView.subscribe('onBeforeMoveDialogShow', function(event) {
          *        //передаём в таблицу диалога перемещения записей новые данные
          *        event.setResult(recordSet);
          *     });
          * </pre>
          */
         /**
           * @event onPrepareFilterOnMove При перемещении записи с применением фильтра
           * @param {Core/EventObject} eventObject Дескриптор события.
           * @param {Object} filter Применяемый фильтр со значением.
           * @example
           * <pre>
           *     onPrepareFilterOnMove:function(event, filter) {
           *        var ln = leftNav.getInstance().getActiveElement(),
           *           hierarchy = ln['data']['ИдАккордеона'] === 'ИдАккордеонаМои' ? 1 : 0;
           *        filter['Иерархия'] = hierarchy;
           *        event.setResult(filter);
           *     },
           * </pre>
           */
         /**
           * @event onDragTry При попытке перемещения записей
           * @param {Core/EventObject} eventObject Дескриптор события.
           * @param {Array} records Перемещаемые записи.
           * @param {String|Number} parent Ключ узла, в котором лежит перемещаемая запись.
           * @example
           * <pre>
           *     browser.subscribe('onDragTry', function (event, source_arr, target_id){
           *        // функциональные области перетаскиваем своими силами
           *        if(source_arr.length){
           *           event.setResult(false);
           *        }
           *     });
           * </pre>
           */
         /**
           * @event onDragStart Перед началом перемещения
           * Описание в {@link SBIS3.CORE.Control.DragAndDropPlugin#onDragStart DragAndDropPlugin}.
           */
         /**
          * @event onDragMove При перемещении записей в какой-то элемент
          * Событие, происходящее при попытке перемещения записей в какой-то элемент.
          * @param {Core/EventObject} eventObject Дескриптор события.
          * @param {Array} records Перемещаемые записи.
          * @param {dTransportRecord || boolean} record Запись, в которую пытаются переместить,
          * если перемещение в запись невозможно( например это лист ), то в событие придёт false.
          * @param {Lib/Control/Control} [from] Из какого браузера начали перетаскивать записи.
          * Будет присутствовать, если записи были получены из другого браузера.
          * @example
          * <pre>
          *     this.subscribe('onDragMove', function (event, records, record, from){
          *        event.setResult(checkDragAvailability(records, record));
          *     });
          * </pre>
          */
         /**
           * @event onDragStop Перед завершением перемещения
           * Описание в {@link SBIS3.CORE.Control.DragAndDropPlugin#onDragStop DragAndDropPlugin}.
           */
         /**
           * @event onDragOut При перемещении записей мышью вне браузера
           * Описание в {@link SBIS3.CORE.Control.DragAndDropPlugin#onDragOut DragAndDropPlugin}.
           */
         /**
           * @event onDragIn При перемещении записей мышью
           * Описание в {@link SBIS3.CORE.Control.DragAndDropPlugin#onDragIn DragAndDropPlugin}.
           */
         $withoutCondition: [ '_initActionsFlags' ],
         $protected: {
            _options: {
               /**
                * @cfg {Boolean} Разрешено ли перемещение записей
                *
                *
                *
                * @remark
                * Возможно ли в этом браузере перемещать записи.
                * А также возможно ли перемещение в другие браузеры и контролы.
                * Необходимо учесть, что для корректной работы перемещения записей метод БЛ должен быть настроен
                * соответствующим образом: для дерева и иерархического представления вид фильтра - "Иерархические структуры".
                *
                * Кнопку перемещения записей можно разместить в {@link  DataViewAbstract.ToolbarPlugin#toolbarButtons панели инструментов}.
                * @example
                * <pre>
                *     <option name="allowMove">true</option>
                * </pre>
                * @see  DataViewAbstract#moveMode
                * @group Record Actions
                */
               allowMove: false,
               /**
                * @cfg {Boolean} Использовать текущий фильтр при перемещении
                *
                *
                *
                * @example
                * <pre>
                *     <option name="useCurrentFilterOnMove">true</option>
                * </pre>
                * @see allowMove
                */
               useCurrentFilterOnMove: false,
               /**
                * @cfg {Boolean} Перенос записей в другое представление данных
                *
                *
                *
                * @example
                * <pre>
                *     <option name="dragRecordsToOtherBrowser">true</option>
                * </pre>
                * @see allowMove
                */
               dragRecordsToOtherBrowser: false,
               /**
                * @cfg {Boolean} Открывать новую родительскую папку после перемещения
                * @example
                * <pre>
                *     <option name="openNewParentFolder">true</option>
                * </pre>
                */
               openNewParentFolder: true,
               /**
                * @cfg {Boolean} Разрешено ли перемещение с помощью DragNDrop
                * @example
                * <pre>
                *     <option name="openNewParentFolder">true</option>
                * </pre>
                */

               allowDragNDrop: true
            },
            _drag: {
               rootBlock: undefined                //Блок, на который нужно навести для бросания в корень
            },
            _isMoveAcceptable: false,              //Признак доступности перемещения записей мышью
            _initialCount: ''                      //Начальное количество перемещаемых записей
         },
         $constructor: function(){
            this._publish('onDragStart', 'onDragMove', 'onDragStop', 'onDragOut', 'onDragIn', 'onPrepareFilterOnMove', 'onDragTry', 'onBeforeMoveDialogShow');
            this._keysWeHandle[cConstants.key.m] = true;
            if (!this._options.display.readOnly && this._options.allowMove) {
               this._registerShortcut(cConstants.key.m, cConstants.modifiers.control, this.moveRecords);
               if (this._options.display.showToolbar) {
                  if (this._toolbarReady) {
                     if (this._toolbarReady.isReady()) {
                        this._addMoveButton();
                     } else {
                        this._toolbarReady.addCallback(function(){
                           this._addMoveButton();
                        }.bind(this));
                     }
                  } else {
                     this.getParent().waitChildControlByName('ws-toolbar-' + this.getId()).addCallback(function(toolbar){
                        this._addMoveButton();
                        return toolbar;
                     }.bind(this));
                  }
               }
               if (this.isTree()) {
                  this._registerShortcut(cConstants.key.left, cConstants.modifiers.shift, this._moveRecordsToParentOrChildren.bind(this, true));
                  this._registerShortcut(cConstants.key.right, cConstants.modifiers.shift, this._moveRecordsToParentOrChildren.bind(this, false));
               }
               this._notify('onNewAction', {
                  title: rk('Перенести'),
                  icon: 'sprite:icon-16 icon-Move icon-primary',
                  name: 'move',
                  isMainOption: this._isMainRowOption({name: 'move'}),
                  callback: 'move',
                  weight: 60
               });
            }
         },
         $condition: function(){
            return (this._options.allowMove || this._options.display.sequenceNumberColumn) && !this._options.display.readOnly;
         },
         _addMoveButton: function(){
            var btn = this._options.display.toolbarButtons.move,
               id = 'move',
               img = 'sprite:icon-16 icon-Move icon-primary',
               title = rk('Переместить выбранные записи') + ' (Ctrl+M)',
               handlers = {
                  onActivated: this.moveRecords.bind(this)
               },
               cfg;
            if (btn === true) {
               cfg = {
                  name: id,
                  id: id,
                  caption: ' ',
                  displayCaption: false,
                  tooltip: title,
                  visible: true,
                  img: img,
                  handlers: handlers
               };
               this._toolbar.addButton(cfg);
            } else if (btn === false) {
               cfg = {
                  id: id,
                  imgSrc: img,
                  caption: title,
                  handlers: handlers
               };
               this._toolbar.getMenu().addItem(cfg);
            }
         },
         _initActionsFlags: function(){
            this._actions.move = this._options.allowMove && !this._options.display.readOnly && $.proxy(this._moveOnCurrentBranch, this);
         },
         _moveOnCurrentBranch: function(row){
            var selectedRecords = this.getSelection(),
               selectedCount = selectedRecords.length;
            if(selectedCount > 0 && this._notify('onDragStart', selectedRecords) !== false){
               var key, record;
               if(row instanceof Object && 'jquery' in row){
                  key = row.attr('rowkey');
                  record = this._currentRecordSet.getRecordByPrimaryKey(key);
               } else {
                  if(!row){
                     row = this.getActiveRecord();
                  }
                  if(row instanceof dTransportRecord){
                     key = row.getKey();
                     record = row;
                  }
               }
               if(key && record && record.get(this._hierColumnIsLeaf)){
                  if(this._notify('onDragStop', selectedRecords, this._isIdEqual(key, this._rootNode) ? key : record, true) !== false){
                     this.move(key, []);
                  }
               }
            }
         },
         _checkAllowMoveForRecord: function(filter, record){
            if (this._options.readOnly || !record.get(this._hierColumnIsLeaf) || !this.getSelection(true).length){
               filter.push('move');
            }
         },
         _dataBind: function(){
            if(!this._options.allowMove){
               return;
            }
            //грязный хак, для того, чтобы не показывалась кнопка перемещения, если этого не нужно.
            //т.к. плагин написан для DataViewAbstract, а опции записи есть только у TableView и его наследников
            if(typeof(this._additionalFilterRowOptions) == 'function' && this.isHierarchyMode())
               this._additionalFilterRowOptions = callNext.call(this._additionalFilterRowOptions, this._checkAllowMoveForRecord);
         },
         _showMoveDialog: function(instance, selectedRecords){
            var self = this,
               selectedCount = selectedRecords.length,
               isHierarchy = CHierarchyViewAbstract && this instanceof CHierarchyViewAbstract,
               dialogConf = {
                  resizable: false
               },
               floatAreaConf = {
                  autoHide: true,
                  direction: 'left',
                  isStack: true,
                  side: 'right',
                  target: cConstants.$body
               },
               configuration = {
                  opener: self,
                  template: 'Deprecated/res/wsmodules/ReplaceRecordDialog/ReplaceRecordDialog',
                  handlers: {
                     onReady: function () {
                        var replacingBrowser = this.getChildControlByName('ws-browser-replace'),
                           replacingWindow = this,
                           recordSet,
                           moveTo = function (to, parents) {
                              var moveToParents = replacingBrowser.getItemParents(to);
                              self.move(to, parents, moveToParents);
                           },
                           setDataOnReady = function () {
                              var
                                 titleColumn = self._options.display.titleColumn,
                                 columnObj = {
                                    title: '',
                                    field: titleColumn
                                 },
                                 filterFix = {};
                              filterFix[self._hierColumnParentId] = self._rootNode;

                              replacingBrowser.setHierarchyField(self._hierColumnParentId, titleColumn);
                              replacingBrowser.setColumns([columnObj]);
                              replacingBrowser.setData(instance);
                              replacingBrowser.setRootNode(self._rootNode, true);
                              replacingBrowser.setQuery(cMerge(instance.getUpdatedQuery(), filterFix), undefined, undefined, undefined, true).addCallback(
                                 function () {
                                    replacingBrowser.showBranch(self._rootNode);
                                    /*
                                       Дерево прогружается с пустыми данными, и считает что в корне записей нет, хотя позже они туда приходят(после showBranch),
                                       поэтому для данного дерева сами поменяем иконку у корня
                                       TODO: в 3.7.3 научить это делать само дерево
                                    */
                                    if (replacingBrowser._count && replacingBrowser.haveRow(null)) {
                                       replacingBrowser.findRow(null).find('.ws-browser-expander')
                                          .removeClass('icon-Arrow1730no')
                                          .addClass('icon-Arrow1730');
                                    }
                                 }
                              );
                           };
                        replacingBrowser.setSource(instance.getSource());
                        recordSet = replacingBrowser.getRecordSet();
                        // добавляем проверку, готов ли рекордсет
                        if (recordSet && recordSet.isLoaded()) {
                           setDataOnReady();
                        } else {
                           replacingBrowser.subscribe('onReady', setDataOnReady.bind(self));
                        }
                        replacingBrowser.subscribe('onSelectionConfirm', function (event, records) {
                           var parent = records.length === 0 ? self._rootNode : records[0].get(self._hierColumnParentId),
                              parents = [];
                           while ((parent + '') !== (self._rootNode + '') && !isHierarchy) {
                              if (!self._expanded[parent]) {
                                 self._expanded[parent] = true;
                                 parents.push(parent);
                              }
                              parent = this.getRecordSet().getRecordByPrimaryKey(parent).get(self._hierColumnParentId);
                           }
                           if (self._notify('onDragStop', selectedRecords, records.length === 0 ? self._rootNode : records[0], true) !== false) {
                              self.move(records.length === 0 ? self._rootNode : records[0].getKey(), parents);
                           }
                           replacingWindow.close();
                        });
                        this.getChildControlByName('replace').subscribe('onActivated', function () {
                           var parent = replacingBrowser.getActiveRecord() ? replacingBrowser.getActiveRecord().get(self._hierColumnParentId) : self._rootNode,
                              parents = [],
                              newParentRecord;
                           while ((parent + '') !== (self._rootNode + '') && !isHierarchy) {
                              if (!self._expanded[parent]) {
                                 self._expanded[parent] = true;
                                 parents.push(parent);
                              }
                              parent = replacingBrowser.getRecordSet().getRecordByPrimaryKey(parent).get(self._hierColumnParentId);
                           }
                           newParentRecord = replacingBrowser.getActiveRecord();
                           if (self._notify('onDragStop', selectedRecords, newParentRecord ? newParentRecord : self._rootNode, true) !== false) {
                              moveTo(newParentRecord ? newParentRecord.getKey() : self._rootNode, parents);
                           }
                           replacingWindow.close();
                        });
                     },
                     onAfterShow: function () {
                        this.setTitle(rk('Переместить') + ' ' + selectedCount + wordCaseByNumber(selectedCount, ' ' + rk('записей'), ' ' + rk('запись', 'множественное'), ' ' + rk('записи')) + ' ' + rk('в'));
                        $('body').toggleClass('ws-progress', false);
                     },
                     onAfterClose: function () {
                        self._mouseMonitor.apply(self);
                        self.setActive(true);
                     }
                  }
               };
            if (this._options.moveMode === 'newFloatArea') {
               new FloatArea(cMerge(configuration, floatAreaConf));
            } else {
               new Dialog(cMerge(configuration, dialogConf));
            }
         },
         /**
          * Перемещает переданные или выбранные записи в указанную
          * @param {Array} [records] Записи, которые нужно переместить.
          * @param {Boolean} [needShowDialog] Нужно ли открывать диалог для выбора записи, куда перемещать. По умолчанию - true
          * @example
          * <pre>
          *     dataView.moveRecords();
          * </pre>
          */
         moveRecords: function(records, needShowDialog) {
            if (!this._options.allowMove) {
               return;
            }
            if (this.isEnabled()) {
               var selectedRecords = records instanceof Array ? records : this.getSelection(),
                  selectedCount = selectedRecords.length,
                  isHierarchy = CHierarchyViewAbstract && this instanceof CHierarchyViewAbstract,
                  self = this;

               if (selectedCount > 0 && this._notify('onDragStart', selectedRecords) !== false) {
                  if (isHierarchy && !this.isTree() && this.getTurn() === '' && needShowDialog === undefined && !this._currentRecordSet.getPageNumber()) { // в дереве всегда спрашиваем куда переместить
                     needShowDialog = false;
                     for (var j = 0; j < selectedCount; j++) { // проверяем все ли записи лежат в одном разделе
                        if (selectedRecords[j].getParentKey() == this._currentRootId) {
                           needShowDialog = true;
                           break;
                        }
                     }
                  }
                  if (needShowDialog !== false) {
                     $('body').toggleClass('ws-progress', true);
                     this._useKeyboard = true;
                     var result = self._notify('onBeforeMoveDialogShow');
                     if (result instanceof dTransportRecordSet) {
                        self._showMoveDialog(result, selectedRecords);
                     } else if (result instanceof cDeferred) {
                        result.addCallback(function (instance) {
                           self._showMoveDialog(instance, selectedRecords);
                        });
                     } else {
                        var dataSource = cMerge({}, this._initialSource);
                        dataSource.firstRequest = false;
                        dataSource.usePages = dataSource.filterParams.usePages = '';
                        dataSource.handlers = {};
                        var filter = this._options.useCurrentFilterOnMove ? this.getQuery() : cMerge({}, this._initialFilter),
                           eventResult = this._notify('onPrepareFilterOnMove', filter);
                        if (typeof(eventResult) === 'object' && Object.prototype.toString.call(eventResult) === '[object Object]') {
                           filter = eventResult;
                        }
                        dataSource.filterParams = filter;
                        dataSource.filterParams['ВидДерева'] = 'Только узлы';
                        dataSource.filterParams[self._hierColumnParentId] = self._rootNode;
                        //если в фильтре ['_ЕстьДочерние']=false, то приходят неправильные данные
                        //поэтому ручками ставим true
                        dataSource.filterParams['_ЕстьДочерние'] = true;
                        dataSource.filterParams.usePages = '';
                        cAttach.attachInstance('Deprecated/RecordSet', dataSource).addCallback(function (instance) {
                           self._showMoveDialog(instance, selectedRecords);
                        });
                     }
                  } else {
                     this._confirmMoveRecords();
                  }
               }
            }
         },
         /**
          * Показывает диалог с подтверждением
          * @param {dTransportRecord} [toRecord] Куда переносятся записи
          * @private
          */
         _confirmMoveRecords: function(toRecord){
            var self = this,
               selectedRecords = this.getSelection();
            if(this._notify('onDragStart', selectedRecords) !== false){
               $('body').toggleClass('ws-progress', true);
               this._useKeyboard = true;
               new DialogConfirm({
                  resizable: false,
                  opener: self,
                  message: rk('Переместить выбранные записи') + ' (' + selectedRecords.length + ') ' + rk('в текущий раздел?'),
                  handlers: {
                     onConfirm: function(event, result){
                        if(result === true){
                           var parentRecord = self._currentRootId;
                           if(toRecord){
                              if(toRecord.get(self._hierColumnIsLeaf))
                                 parentRecord = toRecord;
                              else{
                                 parentRecord = toRecord.get(self._hierColumnParentId);
                                 parentRecord = self._isIdEqual(parentRecord, self._rootNode) ? parentRecord : self._currentRecordSet.getRecordByPrimaryKey(parentRecord);
                              }
                           }
                           if(self._notify('onDragStop', selectedRecords, parentRecord, true) !== false){
                              var id = parentRecord instanceof dTransportRecord ? parentRecord.getKey() : parentRecord;
                              self.move(self._isIdEqual(parentRecord, self._rootNode) ? self._rootNode : id);
                           }
                           self._mouseMonitor.apply(self);
                           self.removeSelection();
                        }
                     }
                  }
               });
               $('body').toggleClass('ws-progress', false);
            }
         },
         /**
          * Возвращает предков элемента
          * @param {String} rowkey Идентификатор записи
          * @return {Array} Массив предков
          * @protected
          */
         _getItemParents: function(rowkey){
            var result = [rowkey],
               record;
            while(rowkey && rowkey != this._rootNode && this._currentRecordSet.contains(rowkey)){
               record = this._currentRecordSet.getRecordByPrimaryKey(rowkey);
               rowkey = record.get(this._hierColumnParentId);
               result.push(rowkey);
            }
            return result;
         },
         /**
          * Функция-обработчик кнопки опций строки "переместить"
          * @param {dTransportRecord} record Запись, для которой показываются опции строки
          * @private
          */
         _moveSelectedRecordsToCurrent: function(record){
            this._confirmMoveRecords(record);
         },
         /**
          *
          * Перемещает выбранные записи в папку с переданным идентификатором (parent).
          * @param {Number|String} parent идентификтор элемента, в который необходимо переместить записи
          * @param {Array} parents массив узлов, которые нужно открыть после перемещения
          * @param {Array} [moveToParents] массив записей - родителей записи, куда нужно перенести выбранные записи
          * @example
          * <pre>
          *    // переместить отмеченные записи в корень
          *    dataView.move(null);
          * </pre>
          */
         move: function(parent, parents, moveToParents){
            if(!this._options.allowMove){
               return;
            }
            if(parent === 'null'){
               parent = null;
            }
            var records = this.getSelection(),
               self = this,
               parentRecord,
               toParents = moveToParents || this._getItemParents(parent),
               isTree = CTreeView && this instanceof CTreeView,
               toMap = {};
            parents = parents || [];

            parents.push(parent);
            for(var i = 0, len = toParents.length; i < len; ++i){
               toMap[toParents[i]] = true;
            }
            var continueMove = function(){
               for(i = 0, len = records.length; i < len; ++i){
                  var key = records[i].getKey();
                  if(key == parent || (key in toMap)){
                     InformPopManager.showMessageDialog({
                        status: 'error',
                        message: rk('Вы не можете переместить запись саму в себя!'),
                        opener: self
                     });
                     return;
                  }
                  if (isTree) {
                     parents.push(records[i].get(self._hierColumnParentId));
                  }
               }

               if(isTree){
                  if(!self._expanded[parent]){
                     self._expanded[parent] = true;
                     parents.push(parent);
                  }
               }

               var moveRecords = function(){
                     var dMultiResult = new cParallelDeferred(),
                        scrollLoadingState,
                        errors = {},
                        afterRender = function(){
                           if (self.getCurrentRootNode() != parent && this.getTurn() === '' && self._options.openNewParentFolder) {
                              self.showBranch(parent);
                           } else {
                              self.unsubscribe('onAfterRender', afterRender);
                              self.setActiveRow(self._body.find('[rowkey="'+records[0].getKey()+'"]'));
                           }
                        },
                        text = '';
                     $('body').toggleClass('ws-progress', true);
                     for(var i = 0, l = records.length; i < l; i++){
                        records[i].set(self._hierColumnParentId, parent);
                        dMultiResult.push(records[i].update().addErrback(function(error){
                           if (!errors[error.message]){
                              errors[error.message] = 0;
                           }
                           errors[error.message]++;
                           error.processed = true;
                           //Здесь return делать нельзя, ибо сразу попадем в getResult от dMultiResult
                           //return error;
                        }));
                     }
                     //При перемещении выключаем загрузку по скроллу, чтобы она не выставляла количество записей на странице
                     if (self._options.display.scrollPaging) {
                        scrollLoadingState = self._allowLoading;
                        self.setAllowScrollLoading(false);
                     }
                     dMultiResult.done();
                     dMultiResult.getResult().addBoth(function(){
                        var
                           count = 0;
                        for (var prop in errors) {
                           count++;
                        }
                        if (count) {
                           $.each(errors, function(key, value){
                              text += key + ' [' + value + '] ;\n ';
                           });
                           InformPopManager.showMessageDialog({
                              status: 'error',
                              message: rk('В процессе перемещения возникли ошибки:') + ' \n ' + text,
                              opener: self
                           });
                        }
                        self._isUpdatingRecords = false;
                        if(!self._expanded[parent] && (parent != self._rootNode || self._options.display.showRoot)){
                           self._activeElement = undefined;
                           self._hovered = parent;
                        }
                        self.removeSelection();
                        if(self._options.mode === 'navigationMode' && isTree){
                           self._closeOtherBranches(parent);
                        }
                        if(!isTree){
                           self.subscribe('onAfterRender', afterRender);
                        }
                        self._onRecordUpdated(isTree, parents);
                        if (self._options.display.scrollPaging) {
                           self.setAllowScrollLoading(scrollLoadingState);
                        }
                        $('body').toggleClass('ws-progress', false);
                     });
                  },
                  checkParentForMove = function(){
                     if(parentRecord.get(self._hierColumnIsLeaf) === true){
                        moveRecords();
                     } else {
                        InformPopManager.showMessageDialog({
                           status: 'error',
                           message: rk('Вы не можете перемещать в лист! Выберите другую запись для перемещения!'),
                           opener: self
                        });
                     }
                  };

               self._isUpdatingRecords = true;
               if(parent === self._rootNode){
                  moveRecords();
               } else {
                  try{
                     parentRecord = self._currentRecordSet.getRecordByPrimaryKey(parent);
                     checkParentForMove();
                  } catch(e){
                     self._currentRecordSet.readRecord(parent).addCallback(function(record){
                        parentRecord = record;
                        checkParentForMove();
                     });
                  }
               }
            };
            var dragTryResult = this._notify('onDragTry', records, parent);
            if (dragTryResult instanceof cDeferred) {
               dragTryResult.addCallback(continueMove);
            } else if(dragTryResult !== false){
               continueMove();
            }
         },
         /**
          * Добавляет обработчик на задатие левой кнопки мыши
          * @private
          */
         _initEvents: function(){
            var parent;
            if (this._options.allowDragNDrop) {
               parent = this._browserContainer.parent();
               this._addDragContainer('[rowkey]', parent);
            }
         },
         /**
          * Возвращает данные для драг-н-дропа
          * @param {jQuery} target Элемент, над которым находится мышь
          * @returns {Array|Boolean}
          * @private
          */
         _dragStart: function(target){
            var textFound = false,
               records;
            for(var i = 0; i < target[0].childNodes.length; ++i){
               if(target[0].childNodes[i].nodeType == nodeType.TEXT_NODE){
                  textFound = true;
                  break;
               }
            }
            if(target.closest('a').length === 1){
               textFound = true;
            }
            if(!textFound){
               return false;
            }
            var record = this._dropRecord(target);
            if(!record){
               return false;
            }
            this.setActiveElement(target.closest(this._rowSelector), false, true);
            records = this.getActiveRow().hasClass('ws-browser-selected') ? this.getSelection() : [this.getActiveRecord()];
            if (this._options.display.sequenceNumberColumn && !this._options.allowMove) {
               //В случае изменения порядка вернется только активная запись
               records = [this.getActiveRecord()];
            }
            //Инициализируем количество записей для перемещения
            this._initialCount = records.length;
            return records;
         },
         /**
          * Обрабатывает начало переноса данных
          * @private
          */
         _dragStarted: function(){
            this._useKeyboard = true;
         },
         /**
          * Создаёт блок, при кидании на который записи будут кинуты в корень
          * @private
          */
         _dragCreateRootBlock: function(){
            this._drag.rootBlock = $('<div class="ws-browser-drag-root" rowkey="null">' +
                  '<div class="ws-browser-drag-root-title"><div class="ws-browser-cell-container ws-browser-hierarchy-cell-container" style="padding-left: 3px;"><div class="ws-browser-hierarchy-expander icon-24 icon-Folder icon-primary rule_icon_brws"></div><div class="rule_name">Корень</div></div></div>')
               .appendTo(this._browserContainer)
               .hover(function(){ //:hover может не работать из-за нажатой клавиши мыши
                  $(this).addClass('ws-browser-row-hover');
               }, function(){
                  $(this).removeClass('ws-browser-row-hover');
               });
            this._onResizeHandler();
         },
         /**
          * Удаляет блок, при кидании на который записи будут кинуты в корень
          * @private
          */
         _dragRemoveRootBlock: function(){
            if(this._drag.rootBlock){
               this._drag.rootBlock.remove();
               this._drag.rootBlock = undefined;
               this._onResizeHandler();
            }
         },
         /**
          * Очищает выделение на строке, в которую хотели бросать данные
          * @param {jQuery} row
          * @private
          */
         _dragRemoveHighlight: function(row){
            if (this._options.allowMove) {
               row.removeClass('ws-browser-want-drag');
               this._isMoveAcceptable = false;
            }
         },
         /**
          * Добавляет выделение на строку, в которую хотели бросать данные
          * @param {jQuery} row
          * @private
          */
         _dragAddHighlight: function(row){
            if(this._options.allowMove && this._isMoveAcceptable && row.hasClass(this._rowSelector.replace(/\./g, ''))){
               row.addClass('ws-browser-want-drag');
            }
         },
         _isDragAcceptable: function(target, data, from, record){
            return this._isMoveAvailable(target, data, from, record);
         },
         _isCorrectDrop: function(data, isCorrect) {
            //Если проверка на перенос равна false, проверем на наличие перемещения по порядковым номерам
            return (this._isMoveAcceptable = isCorrect) || this._options.display.sequenceNumberColumn;
         },
         /**
          * Проверяет, можно ли перенести данные в указанный блок
          * @param {jQuery} target Элемент, над которым находится мышь
          * @param {*} data Данные
          * @param {Lib/Control/Control} from Из какого контрола тащим данные
          * @param {dTransportRecord} record Куда будем кидать данные
          * @returns {Boolean}
          * @private
          */
         _isMoveAvailable: function (target, data, from, record) {
            if(!record){
               return false;
            }
            var key = record.getKey(),
               i, len;
            if(from === this){
               for(i = 0, len = data.length; i < len; ++i){
                  if(data[i].getKey() == key){
                     return false;
                  }
               }
            }
            if( this.isHierarchyMode() ){
               var tempKey = key;
               while(tempKey && !this._isIdEqual(tempKey, this._rootNode)){
                  for(i = 0, len = data.length; i < len; ++i){
                     if(data[i].getKey() == tempKey){
                        return false;
                     }
                  }
                  tempKey = record.get(this._hierColumnParentId);
                  if (this._currentRecordSet.contains(tempKey)) {
                     record = this._currentRecordSet.getRecordByPrimaryKey(tempKey);
                  } else {
                     break;
                  }
               }
            }
            return true;
         },
         /**
          * Создаёт блок, который позволяет бросать записи в корень
          * @returns {dTransportRecord}
          * @private
          */
         _createRootRecord: function () {
            var record = new dTransportRecord({
               colDef: this._currentRecordSet.getColumns(),
               row: [],
               parentRecordSet: this._currentRecordSet
            });
            if (this.isHierarchyMode()) {
               record.setKey(this._rootNode, this._currentRecordSet.getPkColumnIndex());
            }
            return record;
         },
         /**
          * Убирает визуализацию изменения порядка записей
          * @private
          */
         _clearDragHighlight: function ( ) {
            this._body.find(this._rowSelector).removeClass('ws-drop-top-row ws-drop-bottom-row ws-drop-top-row-only ws-drop-place');
            this._drag.flowObject.find('.ws-dragged-count').text(this._initialCount);
         },
         /**
          * Возвращает блок, в который можно было бы кинуть данные
          * @param {jQuery} target Элемент, над которым находится мышь
          * @param {Object} event  Событие
          * @returns {jQuery}
          * @private
          */
         _dropBlock: function(target, event){
            var isHierarchyMode = this.isHierarchyMode();
            //Визуализация вынесена сюда по причине определения точного нахождения указателя
            if (this._options.display.sequenceNumberColumn && (!isHierarchyMode || (isHierarchyMode && this._turn !== 'OnlyLeaves'))) {
               var targetTR = target.closest(this._rowSelector),
                  activeTR = this.getActiveRow(),
                  activeTRKey = activeTR.attr('rowkey'),
                  targetTRKey = targetTR.attr('rowkey'),
                  rs = this.getRecordSet(),
                  isHighlighted = false,
                  hasNeighbor = false,
                  recordAbove,
                  recordBellow,
                  targetRecord,
                  neighborRecord,
                  neighborTRKey,
                  isDragTop,
                  options,
                  neighborTR;
               //Если навели на запись отличную от той которую перемещаем
               if (targetTR.length > 0 && targetTRKey !== undefined && targetTRKey !== activeTRKey && targetTR.closest('#'+this.getId()).length > 0) {
                  this._clearDragHighlight();
                  options = targetTR[0].getBoundingClientRect();
                  isDragTop = event.clientY <= options.top + MOVEABLE_AREA_HEIGHT;
                  //Предполагаемо хотим переместить выше или ниже записи, на которую навели
                  if (isDragTop || event.clientY >= options.top + options.height - MOVEABLE_AREA_HEIGHT) {
                     targetRecord = rs.getRecordByPrimaryKey(targetTRKey);
                     //Соседняя запись записи, на которую навели
                     neighborTR = $(targetTR[(isDragTop ? 'prev' : 'next') + 'All']().filter('[rowkey]')[0]);
                     if (neighborTR.length > 0) {
                        hasNeighbor = true;
                        neighborTRKey = neighborTR.attr('rowkey');
                        neighborRecord = rs.getRecordByPrimaryKey(neighborTRKey);
                     }
                     if (isDragTop) {
                        recordAbove = targetRecord;
                        recordBellow = neighborRecord;
                     } else {
                        recordAbove = neighborRecord;
                        recordBellow = targetRecord;
                     }
                     if (this._notify('onBeforeChangeOrder', this.getActiveRecord(), recordAbove, recordBellow) !== false) {
                        if (hasNeighbor) {
                           //Соседняя запись существует и она не является перемещаемой записью
                           if (neighborTRKey !== activeTRKey && !this._isChildRecord(neighborTRKey, activeTRKey) &&
                                 $(this._getNearestRow(activeTR, isDragTop)).attr('rowkey') !== neighborTRKey) {
                              targetTR.addClass((isDragTop ? 'ws-drop-top-row' : 'ws-drop-bottom-row') + ' ws-drop-place');
                              neighborTR.addClass(isDragTop ? 'ws-drop-bottom-row' : 'ws-drop-top-row');
                              isHighlighted = true;
                           }
                        } else if (!this._isChildRecord(targetTRKey, activeTRKey)) {
                           targetTR.addClass((isDragTop ? 'ws-drop-top-row-only' : 'ws-drop-bottom-row') + ' ws-drop-place');
                           isHighlighted = true;
                        }
                        if (isHighlighted) {
                           //Количество записей на иконке перемещения в случае изменения порядка в любом случае будет равно 1
                           //т. к. изменяем порядок только у активной записи
                           this._drag.flowObject.find('.ws-dragged-count').text('1');
                        }
                     }
                  }
               } else {
                  //Убираем в представлении данных место под перемещение если вдруг увели мышь вне
                  this._clearDragHighlight();
               }
               return targetTR;
            }
            if(isHierarchyMode){
               return target.closest(this._rowSelector +', .ws-browser-drag-root, .ws-browser-container');
            }
            return target.closest('.ws-browser-container');
         },
         /**
          * Является ли запись дочерней для указанной
          * @param {String} rowkey Идентификатор дочерней записи
          * @param {String} parentKey Идентификатор родительской записи
          * @return {Boolean}
          * @private
          */
         _isChildRecord: function (rowkey, parentKey) {
            var isChildRecord = false,
               parents;
            if (this.isHierarchyMode()) {
               parents = this._getItemParents(rowkey);
               for (var i = 0, l = parents.length; i < l; i++) {
                  if (parents[i] === parentKey) {
                     isChildRecord = true;
                     break;
                  }
               }
            }
            return isChildRecord;
         },
         /**
          * Запись, над которой находится мышь. Или корень
          * @param {jQuery} target Элемент, над которым находится курсор мыши
          * @returns {dTransportRecord|Boolean}
          * @private
          */
         _dropRecord: function(target) {
            var row = target.closest(this._rowSelector + ', .ws-browser-container'),
               rowkey = row.attr('rowkey');
            if ((this.isHierarchyMode() && this._isIdEqual(rowkey, this._rootNode)) || row.is(this._browserContainer)) {
               return this._createRootRecord();
            }
            if (!this._currentRecordSet.contains(rowkey)) {
               return false;
            }
            return this._currentRecordSet.getRecordByPrimaryKey(rowkey);
         },
         /**
          * Возвращает запись, в которую можно перенести данные
          * @param {jQuery} target Элемент, над которым сейчас находится курсор мыши
          * @returns {dTransportRecord|Boolean}
          * @private
          */
         _dropTarget: function(target, isChangeSequenceNumber){
            var record = this._dropRecord(target);
            if ( !this.isHierarchyMode() || record && (record.get(this._hierColumnIsLeaf) || isChangeSequenceNumber || this._isIdEqual(record.getKey(), this._rootNode)) ) {
               return record;
            }
            return false;
         },
         /**
          * Обрабатывает окончание переноса записей
          * {Array} records записи, которые пытаются переместить
          * {String} to Ключи записи, в которую пытаются переместить
          * @private
          */
         _dragEnd: function(records, to){
            var record = this._currentRecordSet.contains(to) ? this._currentRecordSet.getRecordByPrimaryKey(to) : undefined;
            if(record && !record.isBranch()){
               //если пытаются переместить в лист, поднимем событие, так как в метод move мы даже не попадем
               this._notify('onDragTry', records, to);
               this._clearDragHighlight();
            }
            this._useKeyboard = false;

            if (this._options.display.rowOptions) {
               this._initRowOptions();
               if (to && to !== 'null' && this._currentRecordSet.contains(to)) {
                  this._showRowOptions(this._body.find('[rowkey="' + to + '"]')[0]);
               }
            }
         },
         /**
          * Обрабатывает перенос записей в этот браузер
          * @param {jQuery} to Элемент, в который переносят записи
          * @param {Array} records Записи, которые переносят
          * @param {Lib/Control/Control} from Из какого контрола переносят записи
          * @private
          */
         _drop: function(to, records, from){
            if (this === from) {
               var targetTr = to.closest(this._rowSelector),
                  isChangeSequenceNumber = targetTr.hasClass('ws-drop-place'),
                  target;
               if (this._isMoveAcceptable && !isChangeSequenceNumber) {
                  //перемещаем в папку только если это разрешено в данный момент
                  target = this._dropTarget(to);
                  if(target){
                     this.move(target.getKey());
                  }
               } else if (isChangeSequenceNumber) {
                  //Если в данный момент разрешено изменение порядка, собираем необходимые праметры для отправки запроса и выполняем его
                  var activeRecord = this.getActiveRecord(),
                     rs = this.getRecordSet(),
                     targetUpper,
                     activeIsBranch,
                     neighborRecord,
                     targetKey = targetTr.attr('rowkey'),
                     sequenceColumn = this._options.display.sequenceNumberColumn,
                     targetRecord = rs.getRecordByPrimaryKey(targetKey),
                     targetNumber = targetRecord.get(sequenceColumn),
                     self = this,
                     methodSuffix,
                     eventSuffix,
                     params,
                     isBottom,
                     neighborTr;
                  isBottom = targetTr.hasClass('ws-drop-bottom-row');
                  methodSuffix = isBottom ? 'После' : 'До';
                  eventSuffix = isBottom ? 'Down' : 'Up';
                  targetUpper = activeIsBranch = (activeRecord.isBranch() === true);
                  neighborTr = $(targetTr[activeIsBranch ? 'prevAll' : 'nextAll']().filter('[rowkey]')[0]);
                  if (!neighborTr.length) {
                     neighborTr = $(targetTr[activeIsBranch ? 'nextAll' : 'prevAll']().filter('[rowkey]')[0]);
                     //т.к. для рекордов мы берём prevAll а для папок nextAll
                     targetUpper = !activeIsBranch;
                  }
                  neighborRecord = rs.getRecordByPrimaryKey(neighborTr.attr('rowkey'));
                  if (activeRecord.isBranch() != targetRecord.isBranch() && !this.isTree()) {
                     targetKey = neighborRecord.getKey();
                     targetNumber = neighborRecord.get(sequenceColumn);
                  }
                  if (!this.isTree() && (targetNumber - neighborRecord.get(sequenceColumn)) * (targetUpper ? -1 : 1) >= 0) {
                     methodSuffix = isBottom ? 'До' : 'После';
                     eventSuffix = isBottom ? 'Up' : 'Down';
                  }
                  params = {
                     'Объект': this.getDataSource().readerParams.linkedObject,
                     'ИдО': this._getComplexKey(activeRecord.getKey()),
                     'ПорядковыйНомер': sequenceColumn,
                     'Иерархия': this.isHierarchyMode() ? rs.getHierarchyField() : null
                  };
                  params['ИдО' + methodSuffix] = this._getComplexKey(targetKey);
                  this._clearDragHighlight();
                  this._sequenceNumberObject.call(
                     'Вставить' + methodSuffix,
                     params,
                     dBLObject.RETURN_TYPE_ASIS).addCallback(function() {

                     self._hideRowOptions();
                     self._notify('onRecord' + eventSuffix, activeRecord);
                     self.reload();

                  });
               }
            }
         },
         /**
          * Можно ли вынести записи из этого браузера
          * @returns {Boolean}
          * @private
          */
         _canDragOut: function(){
            return this._options.dragRecordsToOtherBrowser;
         },
         /**
          * Можно ли внести записи в этот браузер
          * @param {Array} data Записи
          * @param {Lib/Control/Control} from Откуда переносят записи
          * @returns {Boolean}
          * @private
          */
         _dragIn: function(data, from){
            if (this._options.display.rowOptions) {
               this._hideRowOptions();
               this._uninitRowOptions();
            }
            return from === this || this._canDragOut();
         },
         /**
          * Обрабатывает внос записией в браузер
          * @param {Array} data Записи
          * @param {Lib/Control/Control} from Откуда переносят записи
          * @private
          */
         _draggedIn: function(data, from){
            this._container.addClass('drag-over');
            if(this.isHierarchyMode() && !this._options.display.showRoot && this._notify('onDragMove', data, this._createRootRecord(), from) !== false){
               this._dragCreateRootBlock();
            }
         },
         /**
          * Обрабатывает вынос записией из браузера
          * @private
          */
         _draggedOut: function(){
            this._container.removeClass('drag-over');
            this._dragRemoveRootBlock();
         },
         /**
          * Возвращает высоту дополнительных частей браузера. Здесь может быть блок, который используется для переноса записей в корень
          * @param {Number} height Уже посчитанная высота остальных частей
          * @returns {Number}
          * @private
          */
         _getAdditionalHeight: function(height){
            return height + (this._drag && this._drag.rootBlock ? this._drag.rootBlock.outerHeight() : 0);
         },
         /**
          * Лежат ли указанные записи в одной папке
          * @param {Array} records Записи
          * @returns {Boolean}
          * @private
          */
         _checkRecordsInOneFolder: function(records){
            var parent = records[0].get(this._hierColumnParentId);
            for(var i = 1, len = records.length; i < len; ++i){
               if(!this._isIdEqual(parent, records[i].get(this._hierColumnParentId))){
                  return false;
               }
            }
            return true;
         },
         /**
          * Перемещает выбранную/выделенные записи в родительскую/соседнюю запись
          * @param {Boolean} isParent Нужно ли перемещать к родителю
          * @private
          */
         _moveRecordsToParentOrChildren: function(isParent){
            var records,
               parentKey,
               children,
               moveKey,
               moveInfo;
            if(this.isEnabled()){
               records = this.getSelection();
               if(records.length && this._checkRecordsInOneFolder(records)){
                  if(this._notify('onDragStart', records) !== false){
                     parentKey = records[0].get(this._hierColumnParentId);
                     if(isParent){
                        moveKey = this._currentRecordSet.getRecordByPrimaryKey(parentKey).get(this._hierColumnParentId);
                     }
                     else{
                        children = this._currentRecordSet.recordChilds(parentKey);
                        for(var i = 0, len = children.length; i < len; ++i){
                           if(this._isIdEqual(children[i], records[0].getKey())){
                              if(i > 0){
                                 moveKey = children[i - 1];
                                 break;
                              }
                              else{
                                 return;
                              }
                           }
                        }
                     }
                     if(this._isIdEqual(moveKey, this._rootNode)){
                        moveInfo = this._rootNode;
                     }
                     else{
                        moveInfo = this._currentRecordSet.getRecordByPrimaryKey(moveKey);
                     }
                     if(moveKey !== undefined && this._notify('onDragStop', records, moveInfo, true) !== false){
                        this.move(moveKey);
                     }
                  }
               }
               else{
                  InformPopManager.showMessageDialog({
                     status: 'error',
                     message: rk('Данная операция доступна только для записей, лежащих в одной папке.'),
                     opener: this
                  });
               }
            }
         }
      });
   })();

});
