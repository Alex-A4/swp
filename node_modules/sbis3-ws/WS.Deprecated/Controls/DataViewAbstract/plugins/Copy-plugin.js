/**
 * Created with JetBrains PhpStorm.
 * User: aa.adilov
 * Date: 08.11.12
 * Time: 11:57
 * To change this template use File | Settings | File Templates.
 */

define('Deprecated/Controls/DataViewAbstract/plugins/Copy-plugin', [
   'SBIS3.CONTROLS/Utils/InformationPopupManager',
   'bootup',
   'Core/core-instance',
   'Deprecated/Record',
   'Core/Context',
   'Core/Deferred',
   'Core/CommandDispatcher',
   'Core/constants',
   'Deprecated/Controls/DataViewAbstract/DataViewAbstract',
   'i18n!Deprecated/Controls/DataViewAbstract/plugins/Copy-plugin'
], function(
   InformPopManager,
   bootup,
   cInstance,
   dTransportRecord,
   cContext,
   cDeferred,
   CommandDispatcher,
   cConstants,
   DataViewAbstract
) {

/**
 * @class Deprecated/Controls/DataViewAbstract/plugins/Copy-plugin
 * @extends Deprecated/Controls/DataViewAbstract/DataViewAbstract
 * @author Крайнов Д.О.
 * @plugin
 * @public
 * @deprecated
 */
   DataViewAbstract.CopyPlugin = DataViewAbstract.extendPlugin(/** @lends Deprecated/Controls/DataViewAbstract/plugins/Copy-plugin.prototype */{
   /**
    * @event onBeforeCopy Перед копированием записи
    *
    * Обработка результата:
    *    Если вернуть false, то копирование будет отменено
    * @param {Core/EventObject} eventObject описание в классе Core/Abstract
    * @param {dTransportRecord} record Запись, которую собираются копировать
    * @example
    * <pre>
    *    dataView.subscribe('onBeforeCopy', function(event, record){
    *       if(record.get('Удален') === true)
    *          event.setResult(false);
    *    });
    * </pre>
    */
      $protected: {
         _options: {
         /**
          * @cfg {Boolean} Разрешено копирование записей
          *
          *
          * Возможно ли в данном табличном браузере копирование записей.
          * @group Record Actions
          */
            useCopyRecords: false
         },
         _menuButtons: {
            'copy' : [rk('Копировать запись'), 'sprite:icon-16 icon-Copy icon-primary', 'copy']
         },
         _isCopy: false
      },
      $condition: function(){
         return this._options.useCopyRecords && !this._options.display.readOnly;
      },
      $constructor: function(){
         this._publish('onBeforeCopy');
         CommandDispatcher.declareCommand(this, 'copy', this.copy);
         this._keysWeHandle[cConstants.key.f5] = true;
         this._notify("onNewAction", {
            title: rk("Копировать запись"),
            icon: "sprite:icon-16 icon-Copy icon-primary",
            name: "copy",
            callback: "copy",
            isMainOption: this._isMainRowOption({name: 'copy'}),
            weight: 50
         });
      },
      /**
    *
    * Инициирует копирование переданной записи.
    * Если никакую запись не передали, то копируется текущая активная запись.
    * @param {dTransportRecord} [rec=this.getActiveRecord()] Запись, которую нужно копировать.
    * @command
    * @example
    * <pre>
    *    dataView.copy(dataView.getRecordSet().getRecordByPrimaryKey('123'));
    * </pre>
    */
      copy: function(rec){
         var nowRecord = rec && rec instanceof dTransportRecord ? rec : this.getActiveRecord(),
            self = this;
         (function () {
            var allowCopy = self._notify('onBeforeCopy', nowRecord);
            if (allowCopy instanceof cDeferred) {
               return allowCopy;
            } else if (allowCopy === false) {
               return cDeferred.fail();
            } else {
               return new cDeferred().callback(allowCopy instanceof dTransportRecord ? allowCopy : nowRecord);
            }
         })().addCallback(function (record) {
            var recordKey = record.getKey(),
               isBranch = self.isHierarchyMode() ? record.get(self._hierColumnIsLeaf) : false,
               editTemplate = isBranch ? self._options.editBranchDialogTemplate : self._options.editDialogTemplate,
               editMode = isBranch ? self._options.editBranchMode : self._options.editMode;
            if(editTemplate !== ''){
               if(editMode == 'newWindow' || editMode == 'thisWindow'){
                  self._isCopy = true;
                  self._openEditWindow(recordKey, isBranch);
                  return;
               } else if(editMode == 'thisPage'){
                  self._isCopy = true;
                  var topParent = self.getTopParent();
                  cContext.global.setValue('editParams', self.generateEditPageURL(recordKey, isBranch));
                  if(cInstance.instanceOfModule(topParent, 'Lib/Control/AreaAbstract/AreaAbstract'))
                     bootup(editTemplate, undefined, topParent.getTemplateName());
                  return;
               }
               self._useKeyboard = true;
               $('body').toggleClass('ws-progress', true);
               self._currentRecordSet.copyRecord(recordKey, self._options.dataSource.readerParams.format).addBoth(function(record){
                  $('body').toggleClass('ws-progress', false);
                  return record;
               }).addCallback(function(record){
                  var flag = self._notify('onBeforeUpdate', record),
                     editFullScreenTemplate;
                  if(typeof(flag) == 'string')
                     editTemplate = flag;
                  else if(typeof(flag) == 'object'){
                     editTemplate = flag.editTemplate;
                     editFullScreenTemplate = flag.editFullScreenTemplate ? flag.editFullScreenTemplate : editFullScreenTemplate;
                  }
                  if(record instanceof dTransportRecord){
                     self._showDialog(editTemplate, record, undefined, editMode === 'newDialog' ? 'DialogRecord' : 'RecordFloatArea', editFullScreenTemplate);
                  }
               }).addErrback(function(error){
                  self._useKeyboard = false;
                  InformPopManager.showMessageDialog({
                     status: 'error',
                     message: error,
                     opener: self
                  });
               });
            }
         }).addErrback(function(){
         });
      },
      _prepareEditParams: function(params, viewEditParams){
         viewEditParams['copy'] = this._isCopy;
         this._isCopy = false;
         return viewEditParams;
      },
      /**
    * Вычитывает или создаёт запись с указанными параметрами
    * @param {String|undefined} recordId Идентфикатор записи. Если undefined - создаём запись
    * @return {Core/Deferred} Деферред готовности записи, он передаёт первым параметром запись
    */
      _readRecord: function(recordId){
         if (this._isCopy) {
            this._isCopy = false;
            return this._currentRecordSet.copyRecord(recordId, this._options.dataSource.readerParams.format);
         } else {
            return arguments[arguments.length - 1];
         }
      },
      _keyboardHover: function(e, res){
         if(this.isActive() && !e.ctrlKey && !e.altKey && e.shiftKey && e.which === cConstants.key.f5){
            this.copy();
            return false;
         }
         return res;
      },
      _initActionsFlags: function(){
         var vtHier = this.isHierarchyMode() || this._turn !== '',
            isEditBranch = this._options.editBranchDialogTemplate,
            isEdit = this._options.editDialogTemplate,
            self = this;
         this._actions = this._actions || {};
         this._actions["copy"] = (isEdit || (vtHier && isEditBranch)) && function(row){
            if(row instanceof Object && 'jquery' in row)
               row = self._currentRecordSet.getRecordByPrimaryKey(row.attr("rowkey"));
            self.copy(row);
         };
      }
   });

});
