/**
 * Created with JetBrains PhpStorm.
 * User: tm.baeva
 * Date: 22.04.13
 * Time: 10:16
 * To change this template use File | Settings | File Templates.
 */
define("Deprecated/Controls/FiltersWindow/FiltersWindow", [
   "Deprecated/core-attach",
   "Core/ParallelDeferred",
   "Core/Deferred",
   "Core/CommandDispatcher",
   "Deprecated/Controls/FiltersArea/FiltersArea"
], function(cAttach, cParallelDeferred, cDeferred, CommandDispatcher, FiltersArea) {

   "use strict";


/**
   * Окно фильтров
   *
   * @class Deprecated/Controls/FiltersWindow/FiltersWindow
   * @extends Deprecated/Controls/FiltersArea/FiltersArea
   * @author Крайнов Д.О.
   * @control
   * @public
   * @deprecated Используйте класс {@link SBIS3.CONTROLS/Filter/Button}.
   */
  var FiltersWindow = FiltersArea.extend(/** @lends Deprecated/Controls/FiltersWindow/FiltersWindow.prototype */{
     _loadTemplate: function() {
        // HOTFIX DETECTED - похоже что это можно выровнять не таким хардкорным методом.
        var
              self = this,
              dR = new cDeferred(), // onReady окна
              dC = new cDeferred(), // дети на окне
              pD = new cParallelDeferred({
                 steps: [ dR, dC ]
              });

        cAttach.attachInstance('Deprecated/Controls/FiltersDialog/FiltersDialog', {
           template: this._options.template,
           opener: self,
           parent: self,
           linkedContext: this.getLinkedContext(),
           context: self.getLinkedContext(),
           handlers: {
              onReady: function() {
                 dR.callback();
              },
              onAfterClose: function() {
                 self._childControls = [];
                 self.destroy();
              },
              onAfterLoad: function(){
                 self._childControls = this.getImmediateChildControls();
              }
           }
        }).addCallback(function(instance){
           dC.callback();
           CommandDispatcher.declareCommand(instance, 'applyFilter', function(){
              self.applyFilter();
              instance.close();
              return true;
           });
           CommandDispatcher.declareCommand(instance, 'resetFilter', function(){
              self.resetFilter();
              instance.close();
              return true;
           });
        });

        pD.done().getResult().addCallback(function(){
           self._notify('onReady');
        });

        return new cDeferred().callback();
     }
  });

   return FiltersWindow;

});
