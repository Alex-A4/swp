/**
 * Created with JetBrains PhpStorm.
 * User: tm.baeva
 * Date: 21.04.13
 * Time: 20:21
 * To change this template use File | Settings | File Templates.
 */
define("Deprecated/Controls/FieldMoney/FieldMoney", [
   'Core/IoC',
   "Deprecated/Controls/FieldNumeric/FieldNumeric"
], function(IoC, FieldNumeric) {

   "use strict";

   /**
    * Поле ввода денежных значений
    * @class Deprecated/Controls/FieldMoney/FieldMoney
    * @extends Deprecated/Controls/FieldNumeric/FieldNumeric
    * @author Крайнов Д.О.
    * @control
    * @public
    * @initial
    * <component data-component='Deprecated/Controls/FieldMoney/FieldMoney' style='width: 100px'>
    * </component>
    * @category Fields
    * @designTime actions Deprecated/Controls/FieldString/design/design
    * @ignoreOptions decimals
    * @deprecated Используйте класс {@link SBIS3.CONTROLS/MoneyTextBox}.
    */
   var FieldMoney = FieldNumeric.extend(/** @lends Deprecated/Controls/FieldMoney/FieldMoney.prototype */{
       $protected : {
         _options : {
            /**
             * @cfg {Number} Количество знаков после запятой
             * Отрицательное значение опции - количество знаков после запятой не ограничено
             *
             */
            decimals: 2,
            /**
             * @cfg {Boolean} Принадлежность поля к числам повышенной точности (BigNum)
             *
             */
            bigNum: false,
            cssClassName: 'ws-field-numeric ws-field-money'
         }
      },
      /**
       * Обработка денежного значения
       * @returns {String} если денежное поле с повышенной точностью, тогда отдаем без форматирования
       * @protected
       */
      _notFormatedVal : function(){
         if (this._options.bigNum) {
            return prepareMoneyByPrecision((this._curval + '').replace(/ /g, ''), this._options.decimals);
         }
         return FieldMoney.superclass._notFormatedVal.apply(this, arguments);
      },
      /**
       * Обработка денежного значения
       * @param {String} value входное значение
       * @returns {String} value обработанное значение на выходе
       * @protected
       */
      _valueInternalProcessing: function(value){
         if (value === null) {
            value = undefined;
         }
         return FieldMoney.superclass._valueInternalProcessing.apply(this, [value]);
      }
   });

   function prepareMoneyByPrecision(value, precision ) {
      var groups = /^\-?(\d+)(\.\d{0,})?$/.exec(value);
      if (groups !== null) {
         precision = +precision||4;
         var floatPart = groups[2],
            realPart = groups[1] ;
         if (typeof floatPart === 'undefined') {
            floatPart = '.';
         }
         var len = precision - floatPart.length + 1;
         if (len > 0) {
            for (var i=0;i < len; i++)  floatPart += '0';
         } else if(len < 0) {
            floatPart = floatPart.slice(0, len);
         }
         return realPart+floatPart;
      } else {
         IoC.resolve('ILogger').error('prepareMoneyByPrecision', 'Value containing not valid characters only numbers allowed.');
      }
      return value;
   }

   return FieldMoney;

});
