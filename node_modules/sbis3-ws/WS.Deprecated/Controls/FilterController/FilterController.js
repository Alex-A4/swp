/**
 * Created by aa.adilov on 22.07.14.
 */
define('Deprecated/Controls/FilterController/FilterController', [
   'Core/helpers/Function/callNext',
   "Core/constants",
   "Lib/Control/CompoundControl/CompoundControl",
   "html!Deprecated/Controls/FilterController/FilterController",
   "Core/detection",
   "Deprecated/Controls/PathFilter/PathFilter",
   "Deprecated/Controls/FilterButton/FilterButton",
   "css!Deprecated/Controls/FilterController/FilterController"
], function(callNext, cConstants, CompoundControl, dotTplFn){

   var FILTER_BUTTON_MARGIN = 8;                 //Внешний отступ кнопки фильтров

   /**
    * Панель с фильтром - это компонент, который состоит из {@link Deprecated/Controls/FilterButton/FilterButton} (всплывающая панель и кнопка
    * управления её отображением) и {@link Deprecated/Controls/PathFilter/PathFilter} (параметры быстрого доступа к фильтру).
    * Его используют совместно с представлениями данных (например, {@link Deprecated/Controls/TableView/TableView}),
    * связывание с которыми производят в опции {@link browserId}.
    *
    * <ul>
    *    <li>Всплывающая панель отображает шаблон-компонент, который настраивают в опции {@link template}.
    *    Значения контролов, созданных в шаблоне, влияют на параметры фильтра.
    *    Допускается назначение функции рендеринга шаблона в опции {@link singleFilterItem}.
    *    Чтобы на панели создать фильтр с набираемыми параметрами, внутри шаблона используют {@link Deprecated/Controls/FilterView/FilterView}.
    *    Чтобы на панели отображать историю выбора параметров фильтра, используют опцию {@link showHistory}.
    *    По умолчанию всплывающая панель скрыта.</li>
    *    <li>Параметры быстрого доступа по умолчанию отсутствуют. Их набор настраивают в опции {@link filters},
    *    режим отображения - в {@link mode}, а обработчики - в {@link pathFilterHandlers}.
    *    Параметры быстрого доступа отображаются рядом с кнопкой управления панелью.</li>
    *    <li>Положение кнопки управления панелью настраивают опцией {@link align}, а её обработчик - в {@link filterButtonHandlers}.
    *    Необходимость отправки значений по умолчанию определяется опцией {@link sendDefault}.</li>
    * </ul>
    * @class Deprecated/Controls/FilterController/FilterController
    * @extends Lib/Control/CompoundControl/CompoundControl
    * @control
    * @public
    * @author Крайнов Д.О.
    * @deprecated Используйте класс {@link SBIS3.CONTROLS/Filter/Button}.
    */
   var FilterController = CompoundControl.extend(/** @lends Deprecated/Controls/FilterController/FilterController.prototype */{
      _dotTplFn: dotTplFn,
      $protected : {
         _pathFilter : null,
         _filterButton : null,
         _minWidth: undefined,
         _PFContainer: undefined,
         _PFName: 'fastFilter',
         _FBName: 'filterButton',
         _options : {
            /**
             * @cfg {String} Имя шаблона для всплывающей панели
             */
            template: '',
            /**
             * @cfg {String} Идентификатор связанного браузера
             * @editor InternalBrowserChooser
             */
            browserId: undefined,
            /**
             * @cfg {Function} Функция рендеринга компонента фильтра
             */
            singleFilterItem: undefined,
            /**
             * @cfg {Function} Функция рендеринга строки кнопки фильтров
             */
            filterLine: undefined,
            /**
             * @cfg {Boolean} Нужно ли кнопке фильтров посылать значения по умолчанию
             */
            sendDefault: false,
            /**
             * @typedef {string} DisplayMode
             * @variant standart стандартный
             * @variant hover    выпадающий список
             */
            /**
             * @cfg {DisplayMode} Режим отображения быстрого фильтра
             */
            mode: 'standart',
            /**
             * @typedef {Object} Filter
             * @property {string} defaultValue значение фильтра по умолчанию
             * @property {string} value начальное значение
             */
            /**
             * @cfg {Object.<string, Filter>} Параметры фильтрации быстрого фильтра
             * noDefaultValue : false рисовать или нет крестик у данного фильтра.
             */
            filters: {},
            /**
             * @cfg {Object} Обработчики для быстрого доступа к фильтру
             */
            pathFilterHandlers: {},
            /**
             * @cfg {Object} Обработчики для кнопки фильтров
             */
            filterButtonHandlers: {},
            /**
             * @cfg {Boolean} Отображать ли историю выбора
             */
            showHistory: false,
            /**
             * @cfg {String} Выравнивание кнопки фильтров и быстрого доступа к фильтру
             *
             * Выравнивание осуществляется внутри контейнера контрола.
             * Возможные значения:
             * <ol>
             *    <li>left - по левому краю контейнера;</li>
             *    <li>right - по правому краю.</li>
             * </ol>
             */
            align: 'right'
         }
      },
      $constructor : function() {
         var name = '-' + this.getName();
         this._PFName += name;
         this._FBName += name;
      },
      init: function(){
         FilterController.superclass.init.call(this);
         this._pathFilter = this.getChildControlByName(this._PFName);
         this._filterButton = this.getChildControlByName(this._FBName);
         this._container.find('.ws-filter-button-text').addClass('ws-hidden');
         this._filterButton.setLinkedPathFilter(this._pathFilter);
         this._minWidth = Math.round(this._container.width()/2);
         this._PFContainer = this._container.find('.ws-FilterController__pathFilter');
         this._initEvents();
         //Хлебный фильтр, метод setFilter(), может не поднимать событие onFilterChange,
         //для обхода было предложено такое решение
         this._pathFilter.setFilter = callNext.call(this._pathFilter.setFilter, this._setFilter.bind(this));
      },
      /**
       * Возвращает кнопку фильтров
       * @returns {Control|*}
       */
      getFilterButton: function() {
         return this._filterButton;
      },
      /**
       * Возвращает хлебный фильтр
       * @returns {Control|*}
       */
      getPathFilter: function() {
         return this._pathFilter;
      },
      /**
       * Устанавливает шаблон, который будет показан в панели фильтров
       * @param {String} template Название шаблона
       */
      setTemplate: function (template) {
         if (template) {
            this.waitChildControlByName(this._FBName).addCallback(function (instance) {
               instance.setTemplate(template);
            });
         }
      },
      /**
       * Устанавливает связанный браузер
       * @param {Deprecated/Controls/DataViewAbstract/DataViewAbstract} browser Браузер, который нужно выбрать
       */
      setLinkedView: function (browser) {
         if (browser) {
            this.waitChildControlByName(this._FBName).addCallback(function (instance) {
               instance.setLinkedView(browser);
            });
         }
      },
      _initEvents: function(){
         var self = this;
         this._filterButton.subscribe('onDrawLine', function(){
            if(cConstants.browser.firefox) {
               self._onResizeHandler();
            } else {
               self._updateSize();
            }
         });
         this._pathFilter.subscribe('onFilterChange', this._onFilterChangeHandler.bind(this));
      },
      _onResizeHandler: function(){
         FilterController.superclass._onResizeHandler.apply(this, arguments);
         var width = this._container.width() - FILTER_BUTTON_MARGIN,
            maxWidth = this._filterButton.getMaxWidth(),
            resultWidth = this._pathFilter.getResultWidth(),
            newMaxWidth = resultWidth < this._minWidth ? width - resultWidth : this._minWidth;
         this._minWidth = Math.round(width/2);

         if (maxWidth !== newMaxWidth){
            this._filterButton.setMaxWidth(newMaxWidth);
            if (resultWidth < this._pathFilter.getFullWidth()) {
               this._updateSize();
            }
            this._pathFilter.updateWidth();
         }
      },
      /**
       * Обработчик на изменение фильтра в быстром доступе к фильтру
       * @private
       */
      _onFilterChangeHandler: function() {
         this._updateSize();
      },
      /**
       * Метод, вызываемый после метода быстрого доступа к фильтру setFilter()
       * необходим в случае noNotify == true
       * @param {String} filterName имя фильтра, который устанавливается
       * @param {String} value - значение фильтра, который устанавливается
       * @param {Boolean} [noNotify] - признак поднятия события onFilterChange
       * @private
       */
      _setFilter: function(filterName, value, noNotify) {
         if (noNotify) {
            this._onFilterChangeHandler();
         }
      },
      _updateSize: function(){
         var pathFilterFullWidth = this._pathFilter.getFullWidth(),
             pathFilterResultWidth = this._pathFilter.getResultWidth(),
             width = this._container.width() - FILTER_BUTTON_MARGIN,
             maxWidth;
         if (this._filterButton.getContainer().width() > this._minWidth) {
            maxWidth = width - (pathFilterFullWidth < this._minWidth ? pathFilterFullWidth : this._minWidth);
         } else {
            maxWidth = width - pathFilterResultWidth;
            if (maxWidth < pathFilterResultWidth) {
               maxWidth = this._minWidth;
               this._PFContainer.css('max-width', width - this._minWidth);
            }
         }
         this._filterButton.setMaxWidth(maxWidth);
      }
   });

   return FilterController;
});
