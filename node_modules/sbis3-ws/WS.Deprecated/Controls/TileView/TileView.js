/**
 * Created by am.gerasimov on 16.02.2015.
 */
define('Deprecated/Controls/TileView/TileView',
   [
   "Core/constants",
   "Deprecated/Controls/HierarchyCustomView/HierarchyCustomView",
   "html!Deprecated/Controls/TileView/TileViewRow",
   "Core/DependencyResolver",
   "css!Deprecated/Controls/TileView/TileView"
],
   function(cConstants, HierarchyCustomView, dotTplForRow, DependencyResolver) {

      "use strict";

      DependencyResolver.register(
         'Deprecated/Controls/TileView/TileView',
         [],
         "Deprecated/Controls/DataViewAbstract/SBIS3.CORE.TableView/SBIS3.CORE.HierarchyViewAbstract/SBIS3.CORE.HierarchyView/SBIS3.CORE.HierarchyCustomView");

      var
         CORRECT_ROWOPTIONS_POSITION = 7,
         ROWOPTIONS_WIDTH = 22,
         ROWOPTIONS_HEIGHT = 22;

      /**
       * @class Deprecated/Controls/TileView/TileView
       * @extends Deprecated/Controls/HierarchyCustomView/HierarchyCustomView
       * @author Крайнов Д.О.
       * @public 
       *
       * @cssModifier ws-tileView-rowOptions-horPosition При наличии этого класса, опции будут отображаться горизонтально
       * @cssModifier ws-tileView-rowOptions-verPosition При наличии этого класса, опции будут отображаться вертикально
       * @cssModifier ws-tileView-rowOptions-verHorPosition При наличии этого класса, опции у папок будут отображаться вертикально, а у листьев горизонтально
       *
       * @control
       * @initial
       * <component data-component='Deprecated/Controls/TileView/TileView'>
       * </component>
       * @category Table
       * @deprecated Используйте класс {@link SBIS3.CONTROLS/Tree/CompositeView}.
       */
      var TileView = HierarchyCustomView.extend(/** @lends Deprecated/Controls/TileView/TileView.prototype */{
         /**
          * @event onDisplayValueChange Происходит при смене режима отображения.
          * Событие происходит при смене режима отображения.
          * @param {Core/EventObject} eventObject Дескриптор события.
          * @param {String} displayStyle Режим отображения.
          * Если вернуть false, то смены отображения не произойдёт.
          * @example
          * <pre>
          *    dataView.subscribe('onDisplayValueChange', function(event, style){
          *        if(dataView.getCurrentRootNode() === 'null') {
          *          event.setResult(false);
          *        }
          *    });
          * </pre>
          */
         $protected: {
            _options: {
               display: {
                  /**
                   * @cfg {String} Размер картинки для листа
                   * @variant small картинка маленького размера 32x32
                   * @variant medium картинка среднего размера 120x120
                   * @variant big картинка большого размера 200x150
                   *
                   */
                  imageSizeForList: 'medium',
                  /**
                   * @cfg {String} Размер картинки для папки
                   * @variant small картинка маленького размера 32x32
                   * @variant medium картинка среднего размера 120x120
                   *
                   */
                  imageSizeForFolder: 'medium',
                  /**
                   * @cfg {String} Режим отображения
                   * @variant tile Отображается плиткой
                   * @variant list Папки отображаются плиткой, листья списком
                   * @variant hierarchy Отображается как иерархическое представление
                   */
                  displayStyle : 'tile',
                  /**
                   * Поля, которые берутся из record
                   */
                  fields: {
                     image: 'Изображение',
                     description: 'Описание'
                  },
                  /**
                   * @cfg {Boolean} Использовать ли стандартный шаблон для отображения
                   *
                   */
                  useDefaultTemplate: true,
                  /**
                   * @cfg {Number} Минимальная ширина для папки
                   */
                  minWidthForFolder: 229,
                  /**
                   * @cfg {Number} Минимальная ширина для листа
                   */
                  minWidthForList: 304,
                  /**
                   * @cfg {Number} Высота для папок
                   */
                  heightForFolder: 190,
                  /**
                   * @cfg {Number} Высота для листьев
                   */
                  heightForList: 258,
                  /**
                   * функция рендеринга элементов
                   * @cfg {Function}
                   */
                  itemRender:'',
                  /**
                   * Если выставлен этот флаг, то ширина листьев и папок будет одинаковая(за основную ширину, берётся ширина листьев)
                   * @cfg {Boolean}
                   */
                  commonWidthPercentage: false
               },
               iconWidth: cConstants.Browser.iconWidth
            },
            _itemPercentage: {
               10: 'ws-browser-percentage-tenElems',
               9: 'ws-browser-percentage-nineElems',
               8: 'ws-browser-percentage-eightElems',
               7: 'ws-browser-percentage-sevenElems',
               6: 'ws-browser-percentage-sixElems',
               5: 'ws-browser-percentage-fiveElems',
               4: 'ws-browser-percentage-fourElems',
               3: 'ws-browser-percentage-threeElems',
               2: 'ws-browser-percentage-twoElems'
            },
            /**
             * РЕЖИМЫ ОТОБРАЖЕНИЯ
             */
            _displayStyleValue: {
               tile : true,
               list : true,
               hierarchy : true
            },
            /**
             * ПОЗИЦИОНИРОВАНИЕ ОПЦИЙ ЗАПИСИ
             */
            _rowOptionsAlign: {
              ver: false,
              hor: false,
              verHor: false
            },
            _currentFolderPercentage: null,
            _currentItemPercentage: null,
            _rowSelector: '.ws-customView__element',
            _rowOptionsContainer: 'ws-browser-row-options-container ws-customView-rowOptions' //классы для опций строки
         },
         $constructor: function() {
            this._publish('onDisplayValueChange');
            this._rowOptionsAlign[this._container.hasClass('ws-tileView-rowOptions-horPosition') ?
                                    'hor' : this._container.hasClass('ws-tileView-rowOptions-verHorPosition') ?
                                       'verHor' : 'ver'] = true;
         },
         _createElements: function() {
            var container = TileView.superclass._createElements.apply(this, arguments);
            container.find('.ws-browser-folder:last').next().addClass('ws-tileView-firstCell-afterFolder');
            return container;
         },
         /**
          * Расщитывает, какие процентные классы нужны, в зависимости от того, сколько элементов влезает
          */
         _refreshPercentageClass: function() {
            var tableWidth = this._data[0].offsetWidth,
                elemValue = Math.floor(tableWidth / this._options.display.minWidthForList),
                folderValue;

            this._currentItemPercentage = elemValue <= 1 ? 2 : elemValue > 10 ? 10 : elemValue;

            if(this._options.commonWidthPercentage) {
               this._currentFolderPercentage = this._currentItemPercentage;
               return;
            }

            folderValue = Math.floor(tableWidth / this._options.display.minWidthForFolder);
            this._currentFolderPercentage = folderValue <= 1 ? 2 : folderValue > 10 ? 10 : folderValue;
         },
         /**
          * Удаляет все классы связанные с процентами элементов
          */
         _clearPercentageClass: function() {
            this._browserContainer[0].className = this._browserContainer[0].className.replace(/(^|\s)ws-browser-percentage-\S+/g, '');
         },
         /**
          * Устанавливает нужные процентные классы
          * @private
          */
         _setPercentageClass: function() {
            this._browserContainer.addClass(this._itemPercentage[this._currentItemPercentage] + ' ' +
            this._itemPercentage[this._currentFolderPercentage] + '-folder');
         },

         _createContainer: function() {
            TileView.superclass._createContainer.apply(this, arguments);
            if(this._options.display.displayStyle in this._displayStyleValue) {
               this._rootElement.addClass('ws-listView-' + this._options.display.displayStyle + 'Style');
            } else {
               this._rootElement.addClass('ws-listView-tileStyle');
            }
            this._rootElement.addClass(
               'ws-tileView-listImg-' + this._options.display.imageSizeForList +
               ' ws-tileView-folderImg-' + this._options.display.imageSizeForFolder
            );
         },

         _configChecking: function() {
            if(this._options.display.useDefaultTemplate) {
               this._dotItemTemplate = dotTplForRow;
            }
            TileView.superclass._configChecking.apply(this, arguments);
         },
         /**
          * Рисует элементы
          * @param record
          * @returns {*|jQuery|Boolean}
          * @private
          */
         _renderElement: function(record) {
            var elem = TileView.superclass._renderElement.apply(this, arguments),
                isFolder;

            if(elem) {
               isFolder = elem.hasClass('ws-browser-folder');
               if(!(!isFolder && this._options.display.displayStyle !== 'tile') && this._options.display.displayStyle !=='hierarchy') {
                  elem[0].style.height = (isFolder ? this._options.display.heightForFolder : this._options.display.heightForList) + 'px';
               }
               if (typeof(this._options.display.itemRender) === 'function') {
                  this._options.display.itemRender.apply(this, [record, elem]);
               }
               return elem;
            }
            return false;
         },
         /**
          * Обработчик на изменения размеров
          * @private
          */
         _onResizeHandler: function() {
            TileView.superclass._onResizeHandler.apply(this, arguments);

            var tableWidth = this._data[0].offsetWidth,
                needResize = (Math.floor(tableWidth / this._options.display.minWidthForFolder) !== this._currentFolderPercentage) ||
                             (Math.floor(tableWidth / this._options.display.minWidthForList) !== this._currentItemPercentage);

            if(needResize) {
               this._clearPercentageClass();
               this._refreshPercentageClass();
               this._setPercentageClass();
               this.recalcBrowserOnDOMChange();
            }
         },
         /**
          * Установить режим отображения для плиточного реестра
          * Принимает значения:
          * 'tile' - плитка
          * 'list' - папка плиткой, листья списком
          * 'hierarchy' - отобразить стандартной иерархией
          * @param {string} style
          */
         setDisplayStyle: function(style) {
            if(typeof style === 'string' && style in this._displayStyleValue && style !== this._options.display.displayStyle) {
               if(this._notify('onDisplayValueChange', style) !== false) {
                  this._rootElement.removeClass('ws-listView-' + this._options.display.displayStyle + 'Style')
                                   .addClass('ws-listView-' + style + 'Style');
                  this._options.display.displayStyle = style;
                  this.refresh();
               }
            }
         },
         /**
          * Получение режима отображения
          * @returns {string|*}
          */
         getDisplayStyle: function() {
            return this._options.display.displayStyle;
         },
         /**
          * Устанавливает размер картинки для листьев
          * Принимает значения:
          * 'big' - 200x150,
          * 'medium' - 120x120,
          * 'small' - 32x32
          * @param size
          */
         setImageSizeForList: function(size) {
            if(typeof size === 'string' && size !== this._options.display.imageSizeForList) {
               this._rootElement.removeClass('ws-tileView-listImg-' + this._options.display.imageSizeForList)
                                .addClass('ws-tileView-listImg-' + size);
               this._options.display.imageSizeForList = size;
            }
         },
         /**
          * Возвращает, какого размера отображаемые картинки для листьев
          * @returns {string}
          */
         getImgSizeForList: function() {
            return this._options.display.imageSizeForList;
         },
         /**
          * Устанавливает размер картинки для папок
          * Принимает значения:
          * 'medium' - 120x120,
          * 'small' - 32x32
          * @param size
          */
         setImageSizeForFolder: function(size) {
            if(typeof size === 'string' && size !== this._options.display.imageSizeForFolder) {
               this._rootElement.removeClass('ws-tileView-folderImg-' + this._options.display.imageSizeForFolder)
                                .addClass('ws-tileView-folderImg-' + size);
               this._options.display.imageSizeForFolder = size;
            }
         },
         /**
          * Возвращает, какого размера отображаемые картинки для папок
          * @returns {string}
          */
         getImageSizeForFolder: function() {
            return this._options.display.imageSizeForFolder;
         },
         /**
          * Устанавливает рендер для элементов представления данных
          * @param {Function} render Функция отображения
          * @param {boolean} refresh Перерисовать ли представления данных сразу
          */
         setItemRender: function(render, refresh) {
            if(typeof render === 'function') {
               this._options.itemRender = render;
               if(refresh) {
                  this.refresh();
               }
            }
         },
         /**
          * Обрабатывает нажатия клавиш
          * @param {Object} e переданное событие
          * @return {Boolean}
          */
         _keyboardHover: function(e) {
            var res = TileView.superclass._keyboardHover.apply(this, arguments);
            if(this.isActive()) {
               if (e.which === cConstants.key.left || e.which === cConstants.key.right) {
                  var isKeyRight = e.which === cConstants.key.right,
                      currentActiveRow = this.getActiveRow();

                  this.setActiveRow(currentActiveRow ?
                     $(currentActiveRow[(isKeyRight ? 'next' : 'prev') + 'All']().filter('[rowkey]')[0])
                     : this.getContainer().find('.ws-customView__element[rowkey]').eq(0));
                  e.stopPropagation();
                  e.preventDefault();
               }
            }
            return res;
         },
         /**
          * Рассчитывает положение опций для элементов представления
          */
         _calcRowOptionsPosition: function(row, margin) {
            var position = row.position(),
                isHierarchyStyle = this._options.display.displayStyle === 'hierarchy',
                isListWithHorPosition = this._rowOptionsAlign['verHor'] && !row.hasClass('ws-browser-folder'),
                needRecalcMargin = isHierarchyStyle || isListWithHorPosition || this._rowOptionsAlign['hor'],
                recalcMargin = needRecalcMargin ? margin : CORRECT_ROWOPTIONS_POSITION;

            if(this._rowOptionsAlign['verHor']) {
               isListWithHorPosition || isHierarchyStyle ? this._setRowOptionsSize('auto', ROWOPTIONS_HEIGHT) : this._setRowOptionsSize(ROWOPTIONS_WIDTH, 'auto');
               recalcMargin = needRecalcMargin ? this._getRowOptionMargin(row) : recalcMargin;
            }
            return {
               'top': position.top + this._rowOptionsShift.top + recalcMargin,
               'right': this._data[0].offsetWidth - (position.left + row.outerWidth()) + this._rowOptionsShift.right
            };
         },
         /**
          * Устанавливает ширину/высоту для опций строк
          */
         _setRowOptionsSize: function(width, height) {
            if(this._rowOptionsElement) {
               this._rowOptionsElement[0].style.width = typeof(width) === 'number' ? width + 'px' : 'auto';
               this._rowOptionsElement[0].style.height = typeof(height) === 'number' ? height + 'px' : 'auto';
            }
         },
         /**
          * Устанавливает значение минимальной ширины для листа
          * @param {number} width Минимальная ширина для листа
          */
         setMinWidthForList: function(width) {
            if(typeof width === 'number') {
               this._options.display.minWidthForList = width;
            }
         },
         getMinWidthForList: function() {
            return this._options.display.minWidthForList;
         },
         /**
          * Устанавливает значение минимальной ширины для папки
          * @param {number} width Минимальная ширина папки
          */
         setMinWidthForFolder: function(width) {
            if(typeof width === 'number') {
               this._options.display.minWidthForFolder = width;
            }
         },
         /**
          * Возвращает значение минимальной ширины для папки
          * @returns {number} Минимальная ширины для папки
          */
         getMinWidthForFolder: function() {
            return this._options.display.minWidthForFolder;
         },
         /**
          * Устанавливает высоту для листа
          * @param {number} height Высота листа
          */
         setHeightForList: function(height) {
            if(typeof height === 'number') {
               this._options.display.heightForList = height;
            }
         },
         /**
          * Возвращает высоту листа
          * @returns {number} Высота листа
          */
         getHeightForList: function() {
            return this._options.display.heightForList;
         },
         /**
          * Устанавливает высоту папки
          * @param {number} height Высота папки
          */
         setHeightForFolder: function(height) {
            if(typeof height === 'number') {
               this._options.display.heightForFolder = height;
            }
         },
         /**
          * Возвращает высоту папки
          * @returns {number} Высота папки
          */
         getHeightForFolder: function() {
            return this._options.display.heightForFolder;
         },
         destroy: function() {
            this._itemPercentage = {};
            this._displayStyleValue = {};
            this._currentFolderPercentage = null;
            this._currentItemPercentage = null;
            TileView.superclass.destroy.apply(this, arguments);
         }
      });

      return TileView;

   });
