/**
 * Модуль "Компонент SimpleDialogAbstract".
 *
 * @description
 */
define('Deprecated/Controls/SimpleDialogAbstract/SimpleDialogAbstract', [
   "Core/ParallelDeferred",
   "Core/constants",
   "Lib/Control/Window/Window",
   "Core/moduleStubs",
   "Core/Sanitize",
   "css!Deprecated/Controls/SimpleDialogAbstract/SimpleDialogAbstract"
], function(
   cParallelDeferred,
   cConstants,
   Window,
   moduleStubs,
   sanitize
) {
   "use strict";

   /**
    * @class Deprecated/Controls/SimpleDialogAbstract/SimpleDialogAbstract
    * @extends Lib/Control/Window/Window
    * @author Крайнов Д.О.
    * @public
    * @deprecated
    */
   var SimpleDialogAbstract = Window.extend(/** @lends Deprecated/Controls/SimpleDialogAbstract/SimpleDialogAbstract.prototype */{
      $protected: {
         _options: {
            // TODO переделать на нормальный _dotTplFn
            // Делаем окно скрытым по умолчанию, чтобы управлять созданием кнопок
            visible: false,
            autoWidth: true,
            autoHeight: true,
            modal: true,
            /**
             * @cfg {String} Отображаемое сообщение
             *
             * Текст выводится крупным шрифтом.
             * @translatable
             * @see detail
             * @see html
             */
            message: "",
            border: false,
            resizable: false,
             /**
              * @cfg {String} Детали сообщения
              *
              * Отрисовывается под текстом сообщения.
              * Текст выводится меньшим шрифтом относительно текста сообщения.
              * @translatable
              * @see message
              * @see html
              */
            detail: "",
            /**
             * @typedef {Object} Button
             * @property {Number} tabindex
             * @property {Number} name
             * @property {Number} width
             * @property {String} height
             * @property {Boolean} caption
             * @property {Object} renderStyle
             * @property {Object} handlers
             */
            /**
             * @cfg {Array} Массив конфигураций кнопок
             *
             * Массив конфигов для каждой отдельной кнопки диалогового окна.
             * В описании каждой кнопки могут быть следующие параметры:
             * <ol>
             *    <li>tabindex - номер при обходе клавишей Tab;</li>
             *    <li>name - имя;</li>
             *    <li>width - ширина, по умолчанию 100%;</li>
             *    <li>height - высота, по умолчанию 100%;</li>
             *    <li>renderStyle - вид кнопки: "classic" или "asLink" (в виде ссылки);</li>
             *    <li>caption - текст на кнопке, по умолчанию "OK";</li>
             *    <li>handlers - список команд для кнопки, только onActivated;</li>
             * </ol>
             * @see message
             * @see detail
             * @see html
             */
            buttons: [],
             /**
              * @cfg {String} Текст html-вёрстки диалогового окна
              *
              * При задании этой опции не будут выведены тексты сообщений, установленных опциями {@link message} и {@link detail}.
              * @see message
              * @see detail
              * @see buttons
              */
            html: "",
            isRelativeTemplate: true
         },
         _isModal: true,
         _isCentered: true,
         _zIndex: 0,
         _fixedWidth: false
      },
      $constructor : function(){
         var self  = this;

         this._fixedWidth = !isNaN(parseInt(this._width));

         this._window.addClass("ws-smp-dlg");
         this._windowContent.addClass("ws-smp-dlg-content");
         this._window.find('.ws-window-titlebar').remove();
         // Вставляем логику в onAfterLoad, так как иначе EmptyTemplate чистит наш контейнер
         // ToDo: переделать на пользовательский контрол с последующим вызовом его в окне. 
         this.subscribe('onAfterLoad', function() {
            this._container.prepend(
               $([
                  '<div class="ws-smp-dlg-brd ws-smp-dlg-top"></div>',
                  '<div class="ws-smp-dlg-wrapper">',
                  '<h2 class="ws-smp-header" style="display: none;"></h2>',
                  '<p class="ws-smp-message" style="display: none;"></p>',
                  '<div class="ws-smp-dlg-html" style="display: none;"></div>',
                  '<div class="ws-smp-dlg-btns"></div>',
                  '</div>'
               ].join(""))
            );

            if (this._options.html !== "") {
               this.setHtml();
            } else {
               this.setMessage();
            }

            this._addButtons().addBoth(function(r) {
               self.show();
               return r;
            }).addCallback(function() {
               self.setActive(true);
            });

            //если есть выделение то предполагаем, что пользователь хочет выделить текст,
            //поэтому не даем событию всплыть и фокус не перекинется на какой-нитьбудь контрол
            this._window.bind('click.preventClickOnSelection', function(e) {
               if (window.getSelection().toString()) {
                  e.stopImmediatePropagation();
               }
            });
         });

         this.subscribe('onBeforeShow', this._resizeBox.bind(this));
      },

      /**
       * Меняет текст и заголовок сообщения
       * @param {String} [m] текст сообщения
       * @param {String} [t] текст заголовка сообщения
       */
      setMessage: function(m, t) {
         var headerContainer = this._window.find("h2");
         this._options.message = m ? sanitize(m) : sanitize(this._options.message);
         this._options.detail = t ? sanitize(t) : sanitize(this._options.detail);

         this.clear();
         headerContainer.html(this._options.message).show();
         headerContainer.toggleClass('ws-smp-header-with-detail', !!this._options.detail);
         if (this._options.detail) {
            this._window.find("p").html(this._options.detail).show();
         } else {
            this._window.find("p").hide();
         }
         this._resizeBox();
         this._reviewWhiteSpace();
      },
      /**
       * @param {String} [html]
       */
      setHtml: function(html) {
         this._options.html = html ? sanitize(html) : sanitize(this._options.html);

         this.clear();
         this._window.find(".ws-smp-dlg-html").html(this._options.html).show();
         this._resizeBox();
      },
      clear: function() {
         this._window.find(".ws-smp-dlg-html").empty().hide();
         this._window.find("h2").empty().hide();
         this._window.find("p").empty().hide();
      },
      /**
       * Проверяем влез ли текст по ширине (в случае строки без пробелов),
       * если не влез, вставляем </br> через равные промежутки символов
       */
      _reviewWhiteSpace: function() {
         var
            anyChanges = false,
            wrapper = this._window.find('.ws-smp-dlg-wrapper'),
            p = wrapper.find("p"),
            oldInnerW = p.width();

         //true wrap text
         p.css("float", "left");
         if (wrapper.width() < p.outerWidth()) {
            var
               str = p.html(),
               r = p.width() / oldInnerW,
               cuts = [],
               pos,
               chars = parseInt(str.length / r, 10);
            for (var i = 0; i < r; i++) {
               pos = chars * (i + 1);
               cuts[0] = str.substring(0, pos);
               cuts[1] = str.substr(pos + 1);
               str = cuts.join("<br/>");
            }
            p.html(str);
            anyChanges = true;
         }
         //revert
         p.css("float", "none");
         if (anyChanges) {
            this._resizeBox();
         }
      },
      /**
       * Ресайзит окно
       */
      _resizeBox: function() {
         var marginRight = 32,//Для правильного расчета ширины контейнера, т.к. текущие расчеты не учитывают отступ справа
            wrapper, scrollWidth, newScrollWidth, scrollHeight, s, newW, newH;

         if (!this._fixedWidth) {
            wrapper = this._window.find('.ws-smp-dlg-wrapper').addClass("ws-smp-dlg-wrapper-in-resize");
            scrollWidth = wrapper.get(0).scrollWidth;
            scrollHeight = wrapper.get(0).scrollHeight;
            s = scrollWidth * scrollHeight;
            newW = Math.ceil(Math.max(this._options.minWidth, Math.sqrt(s / 0.75) + marginRight));

            wrapper.width(newW);
            newScrollWidth = wrapper.get(0).scrollWidth;
            if (scrollWidth === newScrollWidth || newScrollWidth > newW) {
               newW = newScrollWidth + marginRight;
               wrapper.width(newW);
            }
            newH = Math.max(this._options.minHeight, wrapper.outerHeight());

            this._width = newW;
            this._height = newH;

            wrapper.removeClass("ws-smp-dlg-wrapper-in-resize");
         }
         this._adjustWindowPosition();
      },
      _addButtons: function(){
         var
            self = this,
            btnCfg = this._options.buttons,
            btnCont = this._window.find(".ws-smp-dlg-btns"),
            pd = new cParallelDeferred();

         if (btnCfg.length) {
            btnCont.show();
            for (var i = 0, l = btnCfg.length; i < l; i++) {
               btnCont.append(btnCfg[i].element = $("<span class='ws-smp-dlg-button' sbisname='"+ btnCfg[i].name +"'></span>"));
               if (btnCfg[i].width.indexOf("px") !== -1) {
                  btnCfg[i].element.width(parseInt(btnCfg[i].width, 10));
               }
               btnCfg[i].parent = self;
               (function(i){
                  pd.push(moduleStubs.requireModule("Deprecated/Controls/Button/Button").addCallback(function(result) {
                     return new result[0](btnCfg[i]);
                  }));
               })(i);
            }
         } else {
            btnCont.hide();
         }

         return pd.done().getResult();
      },
      /**
       * Обработка клавиатурных нажатий
       * @param {Event} e
       * @return {Boolean} результат работы метода
       */
      _keyboardHover: function(e) {
         if (e.which in this._keysWeHandle) {
            if (e.which == cConstants.key.esc) {
               this.close();
               return false;
            }
            return SimpleDialogAbstract.superclass._keyboardHover.apply(this, arguments);
         }
         return true;
      },
      destroy: function() {
         this._window.unbind('click.preventClickOnSelection');
         SimpleDialogAbstract.superclass.destroy.apply(this, arguments);
      }
   });

   return SimpleDialogAbstract;
});
