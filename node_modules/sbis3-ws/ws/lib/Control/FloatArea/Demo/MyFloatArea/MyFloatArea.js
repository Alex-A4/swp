define('Lib/Control/FloatArea/Demo/MyFloatArea/MyFloatArea', [
   'Core/helpers/Hcontrol/showFloatArea',
    "Lib/Control/CompoundControl/CompoundControl",
    "html!Lib/Control/FloatArea/Demo/MyFloatArea/MyFloatArea",
    "Deprecated/Controls/Button/Button",
    "Deprecated/Controls/FieldDropdown/FieldDropdown",
    "Deprecated/Controls/FieldRadio/FieldRadio",
    "Deprecated/Controls/FieldNumeric/FieldNumeric",
    "Deprecated/Controls/FieldCheckbox/FieldCheckbox"
], function(showFloatArea, CompoundControl, dotTplFn) {
    /**
     * Lib/Control/FloatArea/Demo/MyFloatArea/MyFloatArea
     * @class Lib/Control/FloatArea/Demo/MyFloatArea/MyFloatArea
     * @extends Lib/Control/CompoundControl/CompoundControl
     * @control
     */
    var moduleClass = CompoundControl.extend(/** @lends Lib/Control/FloatArea/Demo/MyFloatArea/MyFloatArea.prototype */{
        _dotTplFn: dotTplFn,
        $protected: {
            _options: {

            }
        },
        $constructor: function() {
        },

        init: function() {
            moduleClass.superclass.init.call(this);
            var isStackCheckbox = this.getChildControlByName('isStackCheckbox');
            var isMaximizedCheckbox = this.getChildControlByName('isMaximizedCheckbox');
            this.getChildControlByName("Button 1").subscribe("onActivated", function(){
                cfg = {
                    opener: this,
                    name: this.getName()+'-floatArea',
                    template: "Lib/Control/FloatArea/Demo/TemplateFA/TemplateFA",
                    autoCloseOnHide: true,
                    showDelay: this.getLinkedContext().getValue('showDelay'),
                    //отключаем показ при создании - нужно для задержки показа
                    autoShow: false,
                    //обработчик на шаблон всплывающей панели, нужен для задержки показа
                    handlers: {
                        onAfterLoad: function(){
                            this.show();
                        }
                    }
                };
                if (!!isStackCheckbox.getValue()) {
                    cfg.isStack = true;
                    cfg.canMaximize = true;
                    cfg.maximized = !!isMaximizedCheckbox.getValue();
                    cfg.minWidth = 300;
                    cfg.maxWidth = 600;
                }
                else {
                    cfg.target = this.getContainer();
                    cfg.animation = this.getTopParent().getChildControlByName('animation').getStringValue();
                    cfg.animationLength = this.getLinkedContext().getValue('animationLength');
                    cfg.side = this.getTopParent().getChildControlByName('side').getStringValue();
                    cfg.verticalAlign = this.getTopParent().getChildControlByName('verticalAlign').getStringValue();
                    cfg.controlsSide = this.getTopParent().getChildControlByName('controlsSide').getStringValue();
                    cfg.direction = this.getTopParent().getChildControlByName('direction').getStringValue();
                }
                showFloatArea(cfg);
            });
        }
    });
    return moduleClass;
});
