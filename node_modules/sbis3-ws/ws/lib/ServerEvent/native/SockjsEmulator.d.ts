declare class SockJSTransport implements WebSocket {
    /**
    * @lik http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html#section-42
    */
    static FRAME_OPEN: string;
    static FRAME_HEARTBEAT: string;
    static FRAME_ARRAY: string;
    static FRAME_CLOSE: string;
    static CONTROL_FRAMES: string[];
    /**
     * Default timeout is 25sec.
     * Check 30sec delay
     * @type {number}
     */
    static HEARTBEAT_TIMEOUT: number;
    private intervalHeartbeatId;
    private lastHeartbeat;
    private ws;
    /**
     * @link https://github.com/sockjs/sockjs-client/blob/master/lib/main.js#L216
     * @param url
     * @param protocols
     * @param checkHeartbeat нужно ли проверять heartbeat при установке соединения
     */
    constructor(url: string, protocols?: string | string[], checkHeartbeat?: boolean);
    private checkHeartbeat();
    private updateHeartbeat();
    /**
     * @link https://github.com/bestiejs/json3/blob/master/lib/json3.js#L161
     * @param data
     */
    send(data: any): void;
    /**
     * Закрыте websocket.
     *  не передаём параметры, т.к. в safari он не понимает их.
     *  https://online.sbis.ru/opendoc.html?guid=660f28c1-d0f9-400b-84cc-9a22e80b6528
     * @param {number} code
     * @param {string} reason
     */
    close(code?: number, reason?: string): void;
    binaryType: BinaryType;
    readonly bufferedAmount: number;
    readonly extensions: string;
    onclose: (this: WebSocket, ev: CloseEvent) => any;
    onerror: (this: WebSocket, ev: ErrorEvent) => any;
    onmessage: (this: WebSocket, ev: MessageEvent) => any;
    onopen: (this: WebSocket, ev: Event) => any;
    readonly protocol: string;
    readonly readyState: number;
    readonly url: string;
    readonly CLOSED: number;
    readonly CLOSING: number;
    readonly CONNECTING: number;
    readonly OPEN: number;
    addEventListener(type: string, listener: (this: this, ev: Event) => any, useCapture?: boolean): void;
    dispatchEvent(evt: Event): boolean;
    removeEventListener(type: string, listener?: EventListenerOrEventListenerObject, useCapture?: boolean): void;
}
export = SockJSTransport;
