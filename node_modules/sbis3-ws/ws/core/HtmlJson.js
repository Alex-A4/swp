/**
 * Created by rn.kondakov on 07.04.2018.
 */
define('Core/HtmlJson', [
   'Core/Control',
   'Core/validHtml',
   'Core/HtmlJson/resources/tagResolver',
   'View/Runner/tclosure'
], function(control,
   validationOptions,
   tagResolver,
   thelpers) {
   'use strict';

   /**
    * @class Core/HtmlJson
    * @extends Core/Control
    * @author Кондаков Р.Н.
    * @public
    */

   /**
    * @name Core/HtmlJson#json
    * @cfg {Object} Json array (based on JsonML).
    */

   /**
    * @name Core/HtmlJson#tagResolver
    * @cfg {Function | Array} Tag resolver.
    * May be represented like function or array of functions.
    * By order each of them applies to every node of json before building.
    * May be used standard resolver, for example, Core/HtmlJson/linkWrapResolver.
    */

   function validateAttributes(attributes, markupGenerator, additionalValids) {
      var resultAttributes = {};
      if (typeof attributes === 'object') {
         for (var attributeName in attributes) {
            if (!attributes.hasOwnProperty(attributeName)) {
               continue;
            }
            if (validationOptions.validAttributes[attributeName] === true) {
               resultAttributes[attributeName] = markupGenerator.escape(attributes[attributeName]);
               continue;
            }
            if (typeof additionalValids === 'object' && additionalValids[attributeName] === true) {
               resultAttributes[attributeName] = markupGenerator.escape(attributes[attributeName]);
            }
         }
      }
      return resultAttributes;
   }

   function isString(value) {
      return (typeof value === 'string') || (value instanceof String);
   }

   // Create vdom node from json
   function recursiveMarkup(json, markupGenerator, attrsToDecorate, defCollection, viewController, key) {
      if (typeof json !== 'object') {
         // Empty elements will be remove in markupGenerator.joinElements function later.
         return [];
      }
      if (typeof viewController._options.tagResolver === 'function') {
         json = viewController._options.tagResolver(json);
      }
      var out = [];
      if (Array.isArray(json)) {
         if (typeof json[0] === 'string') {
            return recursiveMarkupML(json, markupGenerator, attrsToDecorate, defCollection, viewController, key);
         }
         for (var i = 0; i < json.length; ++i) {
            out = out.concat(recursiveMarkup(json[i], markupGenerator, attrsToDecorate, defCollection, viewController, key + i + '_'));
         }
      } else {
         if (json.type === 'tag') {
            if (!validationOptions.validNodes.hasOwnProperty(json.value)) {
               // Ignore invalid tag with all its children.
               return [];
            }
            var attrs = {
               attributes: validateAttributes(json.attributes, markupGenerator),
               events: {},
               key: key
            };
            var children = recursiveMarkup(json.children, markupGenerator, {}, defCollection, viewController, key);
            out[0] = markupGenerator.createTag(json.value, attrs, children, attrsToDecorate, defCollection, viewController, key);
         }
         if (json.type === 'text') {
            out[0] = markupGenerator.createText(markupGenerator.escape(json.value), key);
         }
      }
      return out;
   }

   // Create vdom node from jsonML
   function recursiveMarkupML(jsonML, markupGenerator, attrsToDecorate, defCollection, viewController, key) {
      if (!isString(jsonML) && !Array.isArray(jsonML)) {
         // Empty elements will be remove in markupGenerator.joinElements function later.
         return [];
      }
      jsonML = tagResolver(jsonML, viewController._options.tagResolver);
      if (isString(jsonML)) {
         return [markupGenerator.createText(markupGenerator.escape(jsonML), key)];
      } else {
         var needCreateTag = isString(jsonML[0]);
         if (needCreateTag && jsonML[0] !== '' && !validationOptions.validNodes.hasOwnProperty(jsonML[0])) {
            // Ignore invalid tag with all its children.
            return [];
         }
         var i = 0,
            attrs = {
               attributes: {},
               events: {},
               key: key
            },
            lastString = '',
            children = [];
         if (!needCreateTag) {
            i = -1;
         } else if (typeof jsonML[1] === 'object' && !Array.isArray(jsonML[1]) && !isString(jsonML[1])) {
            attrs.attributes = validateAttributes(jsonML[1], markupGenerator, viewController._options.addValidAttributes);
            i = 1;
         }
         needCreateTag = needCreateTag && jsonML[0] !== '';
         while (++i !== jsonML.length) {
            if (isString(jsonML[i])) {
               lastString += jsonML[i];
            } else {
               if (lastString) {
                  children = children.concat(recursiveMarkupML(lastString, markupGenerator, needCreateTag ? {} : attrsToDecorate, defCollection, viewController, key + children.length + '_'));
                  lastString = '';
               }
               children = children.concat(recursiveMarkupML(jsonML[i], markupGenerator, needCreateTag ? {} : attrsToDecorate, defCollection, viewController, key + children.length + '_'));
            }
         }
         if (lastString) {
            children = children.concat(recursiveMarkupML(lastString, markupGenerator, needCreateTag ? {} : attrsToDecorate, defCollection, viewController, key + children.length + '_'));
         }
         if (!needCreateTag) {
            return children;
         }
         return [markupGenerator.createTag(jsonML[0], attrs, children, attrsToDecorate, defCollection, viewController, key)];
      }
   }

   var tmplJson = function(data, attr, context, isVdom, sets) {
      var json = [this._options.json];
      var isJsonML = Array.isArray(json[0]);
      while (Array.isArray(json[0])) {
         json = json[0];
      }
      isJsonML = isJsonML && isString(json[0]);
      json = this._options.json;
      if (isJsonML) {
         if (Array.isArray(json[0]) && json.length > 1) {
            json = ['span', json];
         }
      } else {
         if (Array.isArray(json) && json.length > 1) {
            json = {
               type: 'tag',
               value: 'span',
               children: json
            };
         }
      }
      var attrsToDecorate = {
         attributes: attr.attributes,
         context: attr.context
      };
      var defCollection = {
         id: [],
         def: undefined
      };
      var key = (attr && attr.key || '_') + '0_';
      var markupGenerator = thelpers.getMarkupGenerator(isVdom);
      if (isVdom) {
         // Protect view of text from needless unescape in inferno.
         var oldEscape = markupGenerator.escape;
         markupGenerator.escape = function(value) {
            return value.replace(/&([^&]*;)/g, function(match, entity) {
               return '&amp;' + entity;
            });
         };
      }
      try {
         if (isJsonML) {
            var out = markupGenerator.joinElements(recursiveMarkupML(json, markupGenerator, attrsToDecorate, defCollection, this, key));
         } else {
            out = markupGenerator.joinElements(recursiveMarkup(json, markupGenerator, attrsToDecorate, defCollection, this, key));
         }
      } catch (e) {
         thelpers.templateError('Core/HtmlJson', e, data);
      } finally {
         if (isVdom) {
            markupGenerator.escape = oldEscape;
         }
      }
      if (!out || !out.length) {
         out = markupGenerator.joinElements([markupGenerator.createTag('span', {key: key}, [], attrsToDecorate, defCollection, this, key)]);
      }
      return out;
   };

   return control.extend({
      _template: tmplJson,

      /**
       * Set a new value of json.
       * @param {Object} json - Json array (based on JsonML).
       */
      setJson: function(json) {
         this._options.json = json;
      },

      /**
       * Get current HTML code of this control.
       * @returns {String}
       */
      getHtml: function() {
         return this._container ? (this._container[0] || this._container).outerHTML : this.render();
      }
   });
});
