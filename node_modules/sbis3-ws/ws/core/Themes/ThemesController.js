define('Core/Themes/ThemesController', [
   'Core/IoC',
   'Core/core-extend',
   'Core/constants',
   'Core/CssLoader/CssLoader',
   'Core/LinkResolver/LinkResolver',
   'Core/cookie'
], function(IoC, coreExtend, constants, CssLoader, LinkResolver, cookie) {
   'use strict';

   /**
    * Need this class to store data about css links while loading it
    */

   function fixCssUrls(css, name) {
      return css.replace(/url\(.+\)/g, function(url) {
         if (~url.indexOf('data:') || /^url\(('|")\//.test(url)) {
            return url;
         }
         var onlyUrl = url.slice(5, -2);
         return 'url("' + name.split('/').slice(0, -1).join('/').concat('/' + onlyUrl) + '")';
      });
   }

   var ThemesController = coreExtend.extend([], {
      constructor: function() {
         this.css = {};
         this.css.themedCss = [];
         this.css.simpleCss = [];
         this.resolvedCss = {
            themed: {},
            simple: {}
         }
         var isDebug = cookie.get('s3debug');
         isDebug = typeof isDebug === 'boolean' ? isDebug : true;
         this.linkResolver = new LinkResolver(
            isDebug,
            constants.buildnumber,
            constants.wsRoot,
            constants.appRoot,
            constants.resourceRoot);
         this.cssLoader = new CssLoader(this.linkResolver);
         this.themes = {};
         this.pushTheme('default');
      },
      pushSimpleCss: function(cssLink) {
         this.css.simpleCss.push(cssLink);
         this.update();
      },
      getSimpleResolved: function() {
         return this.resolvedCss.simple;
      },
      getThemedResolved: function() {
         return this.resolvedCss.themed;
      },
      pushThemedCss: function(cssLink) {
         this.css.themedCss.push(cssLink);
         this.update();
      },
      pushTheme: function(theme) {
         this.themes[theme] = true;
         this.resolvedCss.themed[theme] = {};
      },
      pushCssAsync: function(name, resolve) {
         var self = this;
         self.cssLoader.loadCssAsync(name).then(function(res) {
            res = fixCssUrls(res, self.linkResolver.resolveLink(name, 'css'));
            self.resolvedCss.simple[name] = res;
            self.update();
            resolve();
         });
      },
      pushCssThemedAsyncAllThemes: function(name, resolve) {
         resolve();
         return;
         var self = this;
         var themesNames = Object.keys(self.themes);
         this.cssLoader.loadCssThemed(name, themesNames).then(function(res) {
            for(var i = 0; i < res.length; i++) {
               res[i] = fixCssUrls(res[i], self.linkResolver.resolveCssWithTheme(name, themesNames[i]));
               self.resolvedCss.themed[themesNames[i]][name] = res[i];
            }
            self.update();
            resolve();
         });
      },
      getCss: function() {
         return this.css;
      },
      initCss: function(csses) {
         this.css.themedCss = this.css.themedCss.concat(csses.themedCss);
         this.css.simpleCss = this.css.simpleCss.concat(csses.simpleCss);
      },
      update: function() {
         if(this.updateCallback) {
            this.updateCallback();
         }
      },
      setUpdateCallback: function(cb) {
         this.updateCallback = cb;
      }
   });

   ThemesController.getInstance = function getInstance() {
      if (process && process.domain && process.domain.req) {
         if (!process.domain.req._$ThemesController) {
            // Create instance on server
            process.domain.req._$ThemesController = new ThemesController();
         }
         return process.domain.req._$ThemesController;
      }
      if (typeof window !== 'undefined') {
         if(!window._$ThemesController) {
            // Create instance on client
            window._$ThemesController = new ThemesController();
         }
         return window._$ThemesController;
      }
      if(global) {
         if(!global._$ThemesController) {
            // Create instance in builder task
            global._$ThemesController = new ThemesController();
         }
         return global._$ThemesController;
      }
      IoC.resolve('ILogger').error('Cannot create themes controller');
   }

   return ThemesController;
});
