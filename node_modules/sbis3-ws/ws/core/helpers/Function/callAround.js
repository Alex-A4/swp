define('Core/helpers/Function/callAround', ['Core/Util/Function'], function (Function) {
   /**
    *
    * Модуль, в котором описана функция <b>callAround(original, decorator)</b>.
    *
    * Метод обертки функции: вызовет вместо исходной функции оборачивающую, передав ей первым аргументом исходную, и сдвинув остальные аргументы.
    *
    * <h2>Параметры функции</h2>
    * <ul>
    *     <li><b>original</b> {Function}  - исходная функция, вызов которой нужно обернуть..</li>
    *     <li><b>decorator</b> {Function} - Оборачивающая функция. Первым аргументом придет original, затем - все остальные аргументы.</li>
    * </ul>
    *
    * <h2>Возвращает</h2>
    *
    * {Function} Результирующая функция.
    *
    * <h2>Пример использования</h2>
    *
    * <pre>
    *    require(['Core/helpers/Function/callAround'], function(callAround) {
    *       var foo = function(bar) {
    *             console.log(`foo: ${bar}`);
    *          },
    *          fooDecorator = callAround(foo, function(original, bar) {
    *             console.log(`before foo: ${bar}`);
    *             original.call(this, bar);
    *             console.log(`after foo: ${bar}`);
    *          });
    *
    *       fooDecorator('baz');
    *       //before foo: baz
    *       //foo: baz
    *       //after foo: baz
    *    });
    * </pre>
    *
    * @class Core/helpers/Function/callAround
    * @public
    * @author Мальцев А.А.
    */
   return Function.callAround;
});

