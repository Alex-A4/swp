define('Core/core-merge', ['Core/Util/Object'], function (Utils) {
   /**
    * Объединяет два объекта в один.
    *
    * <h2>Параметры функции</h2>
    * <ul>
    *     <li><b>hash</b> {Object} Исходный хэш.</li>
    *     <li><b>hashExtender</b> {Object} Хэш-расширение.</li>
    *     <li><b>cfg</b> {Object} Параметры.
    *        <ul>
    *           <li><b>preferSource</b> {Boolean=false} Сохранять или нет исходное значение.</li>
    *           <li><b>rec</b> {Boolean=true} Рекурсивное объединение.</li>
    *           <li><b>clone</b> {Boolean=false} Клонировать элементы или передавать по ссылке.</li>
    *           <li><b>create</b> {Boolean=true} Создавать элементы, отсутствующие в исходном объекте.</li>
    *           <li><b>noOverrideByNull</b> {Boolean=false} Запретить заменять исходные значения на null.</li>
    *           <li><b>ignoreRegExp</b> {String=''} Регулярное вырежения для игнорирования части свойств.</li>
    *        </ul>
    *     </li>
    * </ul>
    * <h2>Возвращает</h2>
    * {Object} Результат объединени (ссылку на hash).
    *
    * <h2>Пример использования</h2>
    * <pre>
    *    require(['Core/core-merge'], function(merge) {
    *       var original = {one: 1, two: 2};
    *       var extender = {two: 'dos', three: 'tres'};
    *       var allTogether = merge(original, extender);
    *       console.log(allTogether.one);//1
    *       console.log(allTogether.two);//'dos'
    *       console.log(allTogether.three);//'tres'
    *       //Исходный объект также модифицируется!
    *       console.log(original.two);//'dos'
    *    });
    * </pre>
    * @class Core/core-merge
    * @public
    */
   return Utils.merge;
});
